#############################################################################
##
#W  grpperm.gd                  GAP library                    Heiko Thei"sen
##
#H  @(#)$Id$
##
#Y  Copyright (C)  1997,  Lehrstuhl D fuer Mathematik,  RWTH Aachen,  Germany
#Y  (C) 1998 School Math and Comp. Sci., University of St.  Andrews, Scotland
##
Revision.grpperm_gd :=
    "@(#)$Id$";


#############################################################################
##
#C  IsPermGroup( <obj> )
##
##  A permutation group is a  group of permutations on  a finite set
##  $\Omega$ of  positive integers. {\GAP} does *not*  require the user to
##  specify the operation domain  $\Omega$ when a permutation  group is
##  defined.
##
DeclareSynonym( "IsPermGroup", IsGroup and IsPermCollection );


#############################################################################
##
#M  IsSubsetLocallyFiniteGroup( <G> ) . . . . . .  for magmas of permutations
##
#T  Here we assume implicitly that all permutations are finitary!
#T  (What would be a permutation with unbounded largest moved point?
#T  Perhaps a permutation of possibly infinite order?)
##
InstallTrueMethod( IsSubsetLocallyFiniteGroup, IsPermCollection );


#############################################################################
##
#M  CanEasilySortElements
##
InstallTrueMethod( CanEasilySortElements, IsPermGroup and IsFinite );

#############################################################################
##
#M  KnowsHowToDecompose( <G> )  . . . . . . . .  always true for perm. groups
##
InstallTrueMethod( KnowsHowToDecompose, IsPermGroup );


#############################################################################
##
#M  IsGeneratorsOfMagmaWithInverses( <permcoll> ) . . . true for perm. colls.
##
InstallTrueMethod( IsGeneratorsOfMagmaWithInverses, IsPermCollection );


#############################################################################
##
#F  MinimizeExplicitTransversal
##
DeclareGlobalFunction( "MinimizeExplicitTransversal" );


#############################################################################
##
#F  AddCosetInfoStabChain
##
DeclareGlobalFunction( "AddCosetInfoStabChain" );


#############################################################################
##
#F  NumberCoset
#F  CosetNumber
##
DeclareGlobalFunction( "NumberCoset" );

DeclareGlobalFunction( "CosetNumber" );


#############################################################################
##
#F  IndependentGeneratorsAbelianPPermGroup
##
DeclareGlobalFunction( "IndependentGeneratorsAbelianPPermGroup" );


#############################################################################
##
#F  OrbitPerms( <perms>, <pnt> )
##
##  returns the orbit of the positive integer <pnt>
##  under the group generated by the permutations in the list <perms>.
##
DeclareGlobalFunction( "OrbitPerms" );


#############################################################################
##
#F  OrbitsPerms( <perms>, <D> )
##
##  returns the list of orbits of the positive integers in the list <D>
##  under the group generated by the permutations in the list <perms>.
##
DeclareGlobalFunction( "OrbitsPerms" );


#############################################################################
##
#A  MovedPoints( <C> ). . . . . . . . . . . . of a collection of permutations
##
##  is the proper set of the positive integers moved by at least one
##  permutation in the collection <C>.
##
DeclareAttribute( "MovedPoints", IsPermCollection );
DeclareAttribute( "MovedPoints", IsList and IsEmpty );


#############################################################################
##
#A  LargestMovedPoint( <C> )
##
##  is the largest integer which is moved by at least one element
##  in the collection or list <C> of permutations.
##  If <C> contains no nontrivial permutation, `0' is returned.
##
DeclareAttribute( "LargestMovedPoint", IsPermCollection );
DeclareAttribute( "LargestMovedPoint", IsList and IsEmpty );


#############################################################################
##
#A  SmallestMovedPoint( <C> )
##
##  is the smallest integer which is moved by at least one element
##  in the collection or list <C> of permutations.
##  If <C> contains no nontrivial permutation, `infinity' is returned.
##
DeclareAttribute( "SmallestMovedPoint", IsPermCollection );
DeclareAttribute( "SmallestMovedPoint", IsList and IsEmpty );


#############################################################################
##
#A  NrMovedPoints( <C> )
##
##  is the number of positive integers that are moved by at least one
##  permutation in the collection <C>.
##
DeclareAttribute( "NrMovedPoints", IsPermCollection );
DeclareAttribute( "NrMovedPoints", IsList and IsEmpty );


#############################################################################
##
#F  SylowSubgroupPermGroup
##
DeclareGlobalFunction( "SylowSubgroupPermGroup" );


#############################################################################
##
#F  SignPermGroup
##
DeclareGlobalFunction( "SignPermGroup" );


#############################################################################
##
#F  CycleStructuresGroup
##
DeclareGlobalFunction( "CycleStructuresGroup" );


#############################################################################
##
#F  ApproximateSuborbitsStabilizerPermGroup( <G>, <pnt> )
##
##  returns an approximation of the orbits of `Stabilizer( <G>, <pnt> )'
##  on all points of the orbit `Orbit( <G>, <pnt> )',
##  without computing the full point stabilizer;
##  As not all Schreier generators are used,
##  the result may represent the orbits of only a subgroup of the point
##  stabilizer.
##
DeclareGlobalFunction("ApproximateSuborbitsStabilizerPermGroup");


#############################################################################
##
#A  AllBlocks( <G> )
##
##  computes a list of representatives of all block systems for a
##  permutation group <G> acting transitively on the points moved by the
##  group.
##
DeclareAttribute( "AllBlocks", IsPermGroup );


#############################################################################
##
#A  TransitiveIdentification( <G> )
##
##  Let <G> be a permutation group, acting transitively on a set  of up to 23
##  points.  Then `TransitiveIdentification' will return the position of this
##  group in the transitive  groups library.  This means,  if <G> acts on
##  $m$ points and    `TransitiveIdentification'  returns $n$,  then <G>   is
##  permutation isomorphic to the group `TransitiveGroup(m,n)'.
##
##  Note: The points moved do *not* need to be [1..<n>], the group
##  $\langle (2,3,4),(2,3)\rangle$ is considered to be transitive on 3
##  points. If the group has several orbits on the points moved by it the
##  result of `TransitiveIdentification' is undefined.
##
DeclareAttribute( "TransitiveIdentification", IsPermGroup );


#############################################################################
##
#E

