#############################################################################
##
#W  addmagma.gd                 GAP library                     Thomas Breuer
##
#W  @(#)$Id$
##
#Y  Copyright (C)  1996,  Lehrstuhl D fuer Mathematik,  RWTH Aachen,  Germany
#Y  (C) 1998 School Math and Comp. Sci., University of St.  Andrews, Scotland
##
##  This file declares the operations for additive magmas,
##  Note that the meaning of generators for the three categories
##  additive magma, additive-magma-with-zero,
##  and additive-magma-with-inverses is different.
##
Revision.addmagma_gd :=
    "@(#)$Id$";


#############################################################################
##
#C  IsAdditiveMagma( <obj> )
##
##  An *additive magma* in {\GAP} is a domain $A$ with an associative and
##  commutative addition `+'$: A \times A \rightarrow A$.
##
DeclareCategory( "IsAdditiveMagma", IsDomain );


#############################################################################
##
#C  IsAdditiveMagmaWithZero( <obj> )
##
##  An *additive magma-with-zero* in {\GAP} is an additive magma $A$ with
##  an operation `0\*' (or `Zero') that yields the zero of $A$.
##
##  So an additive magma-with-zero <A> does always contain a unique
##  additively neutral element $z$, i.e., $z + a = a = a + z$ holds for all
##  $a \in A$ (see~"AdditiveNeutralElement").
##  This element $z$ can be computed with the operation `Zero' (see~"Zero")
##  as `Zero( <A> )', and $z$ is also equal to `Zero( <elm> )' and to
##  `0\*<elm>' for each element <elm> in <A>.
##
##  *Note* that
#T  an additive magma may contain an additively neutral element
#T  but *not* a zero (see~"Zero"), and
##  an additive magma containing a zero may *not* lie in the category
##  `IsAdditiveMagmaWithZero' (see~"Domain Categories").
##
DeclareCategory( "IsAdditiveMagmaWithZero", IsAdditiveMagma );


#############################################################################
##
#C  IsAdditiveGroup( <obj> )
#C  IsAdditiveMagmaWithInverses( <obj> )
##
##  An *additive group* in {\GAP} is an additive magma-with-zero $A$ with an
##  operation `-1\*'$: A \rightarrow A$ that maps each element <a> of $A$ to
##  its additive inverse `-1\*<a>' (or `AdditiveInverse( <a> )',
##  see~"AdditiveInverse").
##
##  The addition `+' of $S$ is assumed to be associative,
##  so an additive group is not more than an *additive magma-with-inverses*.
##  `IsAdditiveMagmaWithInverses' is just a synonym for `IsAdditiveGroup',
##  and can be used alternatively in all function names involving
##  `AdditiveGroup'.
##
##  Note that not every trivial additive magma is an additive
##  magma-with-zero,
##  but every trivial additive magma-with-zero is an additive group.
##
DeclareCategory( "IsAdditiveGroup", IsAdditiveMagmaWithZero );

DeclareSynonym( "IsAdditiveMagmaWithInverses", IsAdditiveGroup );


#############################################################################
##
#F  AdditiveMagma( <gens> )
#F  AdditiveMagma( <Fam>, <gens> )
##
##  returns the additive magma $A$ that is generated by the elements
##  in the list <gens>, that is,
##  the closure of <gens> under addition `+'.
##  The family <Fam> of $A$ can be entered as first argument;
##  this is obligatory if <gens> is empty (and hence also $A$ is empty).
##
DeclareGlobalFunction( "AdditiveMagma" );


#############################################################################
##
#F  AdditiveMagmaWithZero( <gens> )
#F  AdditiveMagmaWithZero( <Fam>, <gens> )
##
##  returns the additive magma-with-zero $A$ that is generated by
##  the elements in the list <gens>, that is,
##  the closure of <gens> under addition `+' and `Zero'.
##  The family <Fam> of $A$ can be entered as first argument;
##  this is obligatory if <gens> is empty (and hence $A$ is trivial).
##
DeclareGlobalFunction( "AdditiveMagmaWithZero" );


#############################################################################
##
#F  AdditiveGroup( <gens> )
#F  AdditiveGroup( <Fam>, <gens> )
##
##  returns the additive group $A$ that is generated by the elements
##  in the list <gens>, that is,
##  the closure of <gens> under addition `+', `Zero', and `AdditiveInverse'.
##  The family <Fam> of $A$ can be entered as first argument;
##  this is obligatory if <gens> is empty (and hence $A$ is trivial).
##
DeclareGlobalFunction( "AdditiveGroup" );

DeclareSynonym( "AdditiveMagmaWithInverses", AdditiveGroup );


#############################################################################
##
#O  AdditiveMagmaByGenerators( <gens> )
#O  AdditiveMagmaByGenerators( <Fam>, <gens> )
##
DeclareOperation( "AdditiveMagmaByGenerators", [ IsCollection ] );


#############################################################################
##
#O  AdditiveMagmaWithZeroByGenerators( <gens> )
#O  AdditiveMagmaWithZeroByGenerators( <Fam>, <gens> )
##
DeclareOperation( "AdditiveMagmaWithZeroByGenerators", [ IsCollection ] );


#############################################################################
##
#O  AdditiveGroupByGenerators( <gens>)
#O  AdditiveGroupByGenerators( <Fam>, <gens> )
##
DeclareOperation( "AdditiveGroupByGenerators", [ IsCollection ] );

DeclareSynonym( "AdditiveMagmaWithInversesByGenerators",
    AdditiveGroupByGenerators );


#############################################################################
##
#F  SubadditiveMagma( <D>, <gens> )
#F  SubadditiveMagmaNC( <D>, <gens> )
##
##  `SubadditiveMagma' returns the additive magma generated by
##  the elements in the list <gens>, with parent the domain <D>.
##  `SubadditiveMagmaNC' does the same, except that it is not checked
##  whether the elements of <gens> lie in <D>.
##
DeclareGlobalFunction( "SubadditiveMagma" );

DeclareGlobalFunction( "SubadditiveMagmaNC" );


#############################################################################
##
#F  SubadditiveMagmaWithZero( <D>, <gens> )
#F  SubadditiveMagmaWithZeroNC( <D>, <gens> )
##
##  `SubadditiveMagmaWithZero' returns the additive magma-with-zero generated
##  by the elements in the list <gens>, with parent the domain <D>.
##  `SubadditiveMagmaWithZeroNC' does the same, except that it is not checked
##  whether the elements of <gens> lie in <D>.
##
DeclareGlobalFunction( "SubadditiveMagmaWithZero" );

DeclareGlobalFunction( "SubadditiveMagmaWithZeroNC" );


#############################################################################
##
#F  SubadditiveGroup( <D>, <gens> )
#F  SubadditiveGroupNC( <D>, <gens> )
##
##  `SubadditiveGroup' returns the additive group generated by
##  the elements in the list <gens>, with parent the domain <D>.
##  `SubadditiveGroupNC' does the same, except that it is not checked
##  whether the elements of <gens> lie in <D>.
##
DeclareGlobalFunction( "SubadditiveGroup" );

DeclareGlobalFunction( "SubadditiveGroupNC" );

DeclareSynonym( "SubadditiveMagmaWithInverses", SubadditiveGroup );

DeclareSynonym( "SubadditiveMagmaWithInversesNC", SubadditiveGroupNC );


#############################################################################
##
#A  GeneratorsOfAdditiveMagma( <A> )
##
##  is a list <gens> of elements of the additive magma <A> that generates <A>
##  as a magma, that is, the closure of <gens> under addition is <A>.
##
DeclareAttribute( "GeneratorsOfAdditiveMagma", IsAdditiveMagma );


#############################################################################
##
#A  GeneratorsOfAdditiveMagmaWithZero( <A> )
##
##  is a list <gens> of elements of the additive magma-with-zero <A> that
##  generates <A> as an additive magma-with-zero,
##  that is, the closure of <gens> under addition and `Zero' (see~"Zero")
##  is <A>.
##
DeclareAttribute( "GeneratorsOfAdditiveMagmaWithZero",
    IsAdditiveMagmaWithZero );


#############################################################################
##
#A  GeneratorsOfAdditiveGroup( <A> )
##
##  is a list <gens> of elements of the additive group <A>
##  that generates <A> as an additive group,
##  that is, the closure of <gens> under multiplication and taking additive
##  inverses (see~"AdditiveInverse") is <A>.
##
DeclareAttribute( "GeneratorsOfAdditiveGroup", IsAdditiveGroup );

DeclareSynonymAttr( "GeneratorsOfAdditiveMagmaWithInverses",
    GeneratorsOfAdditiveGroup );


#############################################################################
##
#A  TrivialSubadditiveMagmaWithZero( <A> )  . . . for an add.-magma-with-zero
##
##  is the additive magma-with-zero that has the zero of
##  the additive magma-with-Zero <A> as only element.
##
DeclareAttribute( "TrivialSubadditiveMagmaWithZero",
    IsAdditiveMagmaWithZero );


#############################################################################
##
#A  AdditiveNeutralElement( <A> )
##
##  returns the element $z$ in the additive magma <A> with the property that
##  $z + a = a = a + z$ holds for all $a \in <A>$,
##  if such an element exists.
##  Otherwise `fail' is returned.
##
##  An additive magma that is not an additive magma-with-zero can have an
##  additive neutral element $z$; in this case, $z$ *cannot* be obtained as
##  `Zero( <A> )' or as `0\*<elm>' for an element <elm> in <A>, see~"Zero".
##
DeclareAttribute( "AdditiveNeutralElement", IsAdditiveMagma );


#############################################################################
##
#O  ClosureAdditiveGroup( <A>, <a> )  . . . . . .  for add. group and element
#O  ClosureAdditiveGroup( <A>, <B> )  . . . . . . . . . . for two add. groups
##
DeclareOperation( "ClosureAdditiveGroup",
    [ IsAdditiveGroup, IsAdditiveElement ] );

DeclareSynonym( "ClosureAdditiveMagmaWithInverses", ClosureAdditiveGroup );


#############################################################################
##
#E

