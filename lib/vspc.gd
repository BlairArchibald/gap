#############################################################################
##
#W  vspc.gd                     GAP library                     Thomas Breuer
##
#H  @(#)$Id$
##
#Y  Copyright (C)  1997,  Lehrstuhl D fuer Mathematik,  RWTH Aachen,  Germany
#Y  (C) 1998 School Math and Comp. Sci., University of St.  Andrews, Scotland
##
##  This file declares the operations for vector spaces.
##
##  The operations for bases of free left modules can be found in the file
##  `basis.g'.
##
Revision.vspc_gd :=
    "@(#)$Id$";

#1
##  Vector spaces are free left modules over a field. 

#############################################################################
##
#C  IsLeftOperatorRing(<R>)
##
DeclareSynonym( "IsLeftOperatorRing",
    IsLeftOperatorAdditiveGroup and IsRing and IsAssociativeLOpDProd );
#T really?


#############################################################################
##
#C  IsLeftOperatorRingWithOne(<R>)
##
DeclareSynonym( "IsLeftOperatorRingWithOne",
    IsLeftOperatorAdditiveGroup and IsRingWithOne
    and IsAssociativeLOpDProd );
#T really?


#############################################################################
##
#C  IsLeftVectorSpace( <D> )
#C  IsVectorSpace( <D> )
##
##  A (left) vector space in {\GAP} is an additive group that is acted on by
##  a division ring from the left such that this action and the addition are
##  left and right distributive.
##
##  (Vector spaces in {\GAP} are always left vector spaces.)
##
DeclareSynonym( "IsLeftVectorSpace",
    IsLeftModule and IsLeftActedOnByDivisionRing );

DeclareSynonym( "IsVectorSpace", IsLeftVectorSpace );

InstallTrueMethod( IsFreeLeftModule,
    IsLeftModule and IsLeftActedOnByDivisionRing );


#############################################################################
##
#C  IsGaussianSpace( <V> )
##
##  A vector space is Gaussian if it allows Gaussian elimination;
##  this is used for row vector spaces and matrix vector spaces.
##
DeclareCategory( "IsGaussianSpace", IsVectorSpace );

InstallTrueMethod( IsGaussianSpace,
    IsFreeLeftModule and IsFullMatrixModule );


#############################################################################
##
#C  IsDivisionRing( <D> )
##
##  A *division ring* in {\GAP} is a nontrivial associative algebra <D>
##  with a multiplicative inverse for each nonzero element.
##  In {\GAP} every division ring is a vector space over a division ring
##  (possibly over itself).
##  Note that being a division ring is thus not a property that a ring can
##  get, because a ring is usually not represented as a vector space.
##
##  The field of coefficients is stored as `LeftActingDomain( <D> )'.
##
DeclareSynonymAttr( "IsDivisionRing",
        IsMagmaWithInversesIfNonzero
    and IsLeftOperatorRing
    and IsLeftVectorSpace
    and IsNonTrivial
    and IsAssociative );


#############################################################################
##
#A  GeneratorsOfLeftVectorSpace( <V> )
#A  GeneratorsOfVectorSpace( <V> )
##
##  returns a set of elements of <V> that spans <V>.
##
DeclareSynonymAttr( "GeneratorsOfLeftVectorSpace",
    GeneratorsOfLeftOperatorAdditiveGroup );

DeclareSynonymAttr( "GeneratorsOfVectorSpace",
    GeneratorsOfLeftOperatorAdditiveGroup );


#############################################################################
##
#A  CanonicalBasis( <V> )
##
##  Returns a \"triangular\" basis of <V> (i.e., the $i$-th basis
##  vector of this basis has zero's until position $i$). 
##  
DeclareAttribute( "CanonicalBasis", IsFreeLeftModule );


#############################################################################
##
#A  NormedRowVectors( <V> ) . . .  normed vectors in a Gaussian row space <V>
##
##  returns a list of those vectors in the row space <V> that have a one in
##  the first nonzero component and are not equal to zero.
##  (This function makes sense only for finite Gaussian vector spaces.)
##
DeclareAttribute( "NormedRowVectors", IsGaussianSpace );

DeclareSynonymAttr( "NormedVectors", NormedRowVectors );


#############################################################################
##
#A  TrivialSubspace( <V> )
## 
##  returns the subspace of <V> generated by the zero vector of <V>
##
DeclareSynonymAttr( "TrivialSubspace", TrivialSubmodule );


#############################################################################
##
#O  AsSubspace( <V>, <U> )  . . . . . . . . . . . view <U> as subspace of <V>
##
##  If the vector space <U> happens to be contained in the vector
##  space <V>, then it can be viewed as subspace of <V>. This function
##  returns that subspace.
##
DeclareOperation( "AsSubspace", [ IsVectorSpace, IsVectorSpace ] );


#############################################################################
##
#O  AsVectorSpace( <F>, <D> ) . . . . . . . . .  view <D> as <F>-vector space
##
##  returns the domain <D> viewed as vector space over <F>.
##
DeclareSynonym( "AsVectorSpace", AsLeftModule );


#############################################################################
##
#F  VectorSpace( <F>, <gens> )
#F  VectorSpace( <F>, <gens>, <zero> )
#F  VectorSpace( <F>, <gens>, "basis" )
#F  VectorSpace( <F>, <gens>, <zero>, "basis" )
##
##  is the vector space over the field <F> spanned by the elements in
##  <gens>. The optional argument <zero> can be used to specify the
##  null element of the space. The argument `\"basis\"' can be used if
##  the generators in <gens> are known to form a basis of the vector space
##  (i.e., if they are known to be linearly independent). 
##
DeclareSynonym( "VectorSpace", FreeLeftModule );


#############################################################################
##
#F  Subspace( <V>, <gens> ) . . . . . . . subspace of <V> generated by <gens>
#F  Subspace( <V>, <gens>, "basis" )
##  
##  is the subspace of the vector space <V> spanned by the collection <gens>.
##  If the elements of <gens> are known to be linearly independent, then
##  the optional argument `\"basis\"' may be added. In this case
##  the dimension of the subspace is immediately set;
##  it is *not* checked whether <gens> really are linearly independent
##  and whether all in <gens> lie in <V>.
##
DeclareSynonym( "Subspace", Submodule );


#############################################################################
##
#F  SubspaceNC( <V>, <gens> )
#F  SubspaceNC( <V>, <gens>, "basis" )
##
##  `SubspaceNC' does the same as `Subspace', except that it does not check
##  whether all in <gens> lie in <V>.
##
DeclareSynonym( "SubspaceNC", SubmoduleNC );


#############################################################################
##
#F  Intersection2Spaces( <AsStruct>, <Substruct>, <Struct> )
##
##  is a function that takes two arguments <V> and <W> which must be finite
##  dimensional vector spaces, and returns the intersection of <V> and <W>.
##
##  If the left acting domains are different then let $F$ be their
##  intersection.
##  The intersection of <V> and <W> is computed as intersection of
##  `<AsStruct>( <F>, <V> )' and `<AsStruct>( <F>, <V> )'.
##
##  If the left acting domains are equal to $F$ then the intersection of <V>
##  and <W> is returned either as $F$-<Substruct> with the common parent of
##  <V> and <W> or as $F$-<Struct>, in both cases with known basis.
##
##  This function is used to handle the intersections of two vector spaces,
##  two algebras, two algebras-with-one, two left ideals, two right ideals,
##  two two-sided ideals.
##
DeclareGlobalFunction( "Intersection2Spaces" );


#############################################################################
##
#F  FullRowSpace( <F>, <n> )
##
##  Is the $n$-dimensional vector space $F^n$.
## 
DeclareSynonym( "FullRowSpace", FullRowModule );


#############################################################################
##
#C  IsSubspacesVectorSpace( <D> )
##
##  The domain of all subspaces of a (finite) vector space lies in the
##  category `IsSubspacesVectorSpace'.
##
DeclareCategory( "IsSubspacesVectorSpace", IsDomain );


#############################################################################
##
#M  IsFinite( <D> ) . . . . . . . . . . . . . . . . .  for a subspaces domain
##
##  Returns `true' if <D> is finite.
##  We allow subspaces domains in `IsSubspacesVectorSpace' only for finite
##  vector spaces.
##
InstallTrueMethod( IsFinite, IsSubspacesVectorSpace );


#############################################################################
##
#O  SubspacesDim( <V>, <dim> )
#A  SubspacesAll( <V> )
##
##  returns a domain of subspaces of <V>. In the first form this domain
##  contains all subspaces of dimension <dim>. In the second form this domain
##  contains all subspaces of <V>. These functions only make sense for finite
##  vector spaces. 
##
DeclareOperation( "SubspacesDim", [ IsVectorSpace, IS_INT ] );
DeclareAttribute( "SubspacesAll", IsVectorSpace );


#############################################################################
##
#F  Subspaces( <V> )
#F  Subspaces( <V>, <k> )
##
##  is the domain of (<k>-dimensional) subspaces of the finite vector space
##  <V>.
##
DeclareGlobalFunction( "Subspaces" );

DeclareGlobalFunction( "IsSubspace" );

#############################################################################
##
#O  OrthogonalSpaceInFullRowSpace( <U> )
##
##  computes the dual space to <U> in the full row space underlying <U> 
##  using the standard scalar product.
##
DeclareAttribute( "OrthogonalSpaceInFullRowSpace", IsGaussianSpace );

#############################################################################
##
#P  IsVectorSpaceHomomorphism( <map> )
##
##  A mapping $f$ is a vector space homomorphism (or linear mapping) if
##  the source and range are vector spaces over the same division ring $D$,
##  and if $f( a + b ) = f(a) + f(b)$ and $f( s \* a ) = s \* f(a)$ hold
##  for all elements $a$, $b$ in the source of $f$ and $s \in D$.
##
DeclareProperty( "IsVectorSpaceHomomorphism", IsGeneralMapping );


#############################################################################
##
#E  vspc.gd . . . . . . . . . . . . . . . . . . . . . . . . . . . . ends here

