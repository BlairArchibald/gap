#############################################################################
##
#W  field.gd                    GAP library                     Thomas Breuer
##
#H  @(#)$Id$
##
#Y  Copyright (C)  1997,  Lehrstuhl D fuer Mathematik,  RWTH Aachen,  Germany
#Y  (C) 1998 School Math and Comp. Sci., University of St.  Andrews, Scotland
##
##  This file declares the operations for division rings.
##
Revision.field_gd :=
    "@(#)$Id$";

#1
##  A *division ring* is a ring in which every non-zero element has an
##  inverse.
##  The most important class of division rings are the commutative ones,
##  which are called *fields*.
##  This chapter describes the general {\GAP} functions for fields and
##  division rings.
##
##  If a field <F> is a subfield of a commutative ring <C>,
##  <C> can be considered as a vector space over the (left) acting domain
##  <F> (see Chapter~"Vector Spaces").
##  In this situation, we call <F> the *field of definition* of <C>.


#############################################################################
##
#P  IsField( <D> )
##
##  A field is a commutative division ring.
##
DeclareSynonymAttr( "IsField", IsDivisionRing and IsCommutative );

InstallTrueMethod( IsCommutative, IsDivisionRing and IsFinite );


#############################################################################
##
#P  IsNumberField( <F> )
##
##  A number field is a finite extension of a prime field in characteristic
##  zero.
##
DeclareProperty( "IsNumberField", IsField );

InstallSubsetMaintenance( IsNumberField,
    IsField and IsNumberField, IsField );

InstallIsomorphismMaintenance( IsNumberField,
    IsField and IsNumberField, IsField );


#############################################################################
##
#P  IsAbelianNumberField( <F> )
##
##  An abelian number field is a number field with abelian Galois group.
##
DeclareProperty( "IsAbelianNumberField", IsField );

InstallTrueMethod( IsNumberField,
    IsAbelianNumberField );

InstallSubsetMaintenance( IsAbelianNumberField,
    IsField and IsAbelianNumberField, IsField );

InstallIsomorphismMaintenance( IsAbelianNumberField,
    IsField and IsAbelianNumberField, IsField );


#############################################################################
##
#P  IsCyclotomicField( <F> )
##
##  A cyclotomic field is an abelian number field that is generated by
##  roots of unity.
##
DeclareProperty( "IsCyclotomicField", IsField );

InstallTrueMethod( IsAbelianNumberField, IsCyclotomicField );

InstallIsomorphismMaintenance( IsCyclotomicField,
    IsField and IsCyclotomicField, IsField );


#############################################################################
##
#P  IsPrimeField( <D> )
##
##  A field is a prime field if it is equal to its prime field (see
##  "PrimeField").
##
DeclareProperty( "IsPrimeField", IsDivisionRing );

InstallIsomorphismMaintenance( IsPrimeField,
    IsField and IsPrimeField, IsField );


#############################################################################
##
#A  PrimeField( <D> )
##
##  The prime field of a division ring <D> is the smallest field which is
##  contained in <D>. If <D> is a field in characteristic zero, for example
##  its prime field is the field of rational numbers.
##
DeclareAttribute( "PrimeField", IsDivisionRing );


#############################################################################
##
#m  Conductor( <F> )
##
##  The attribute is defined in `cyclotom.g'.
##
InstallIsomorphismMaintenance( Conductor,
    IsField and IsAbelianNumberField, IsField );


#############################################################################
##
#A  DefiningPolynomial( <F> )
##
##  is the defining polynomial as a field
##  extension over the left acting domain of <F>.
##
DeclareAttribute( "DefiningPolynomial", IsField );


#############################################################################
##
#A  DegreeOverPrimeField( <F> )
##
##  is the degree of the field <F> over its prime field.
##
DeclareAttribute( "DegreeOverPrimeField", IsDivisionRing );

InstallIsomorphismMaintenance( DegreeOverPrimeField,
    IsDivisionRing, IsDivisionRing );


#############################################################################
##
#A  GeneratorsOfDivisionRing( <D> )
##
##  generators with respect to addition, multiplication, and taking inverses
##  (the identity cannot be omitted ...)
##
DeclareAttribute( "GeneratorsOfDivisionRing", IsDivisionRing );


#############################################################################
##
#A  GeneratorsOfField( <F> )
##
##  generators with respect to addition, multiplication, and taking
##  inverses. This attribute is the same as `GeneratorsOfDivisionRing' (see
##  "GeneratorsOfDivisionRing").
##
DeclareSynonymAttr( "GeneratorsOfField", GeneratorsOfDivisionRing );


#############################################################################
##
#A  GaloisGroup( <F> )
##
##  the Galois group of a field <F> is the group of all field automorphisms
##  of <F> which fix the left acting domain of <F>.
DeclareAttribute( "GaloisGroup", IsField );
#T and of polynomial?


#############################################################################
##
#A  GaloisStabilizer( <F> )
##
##  is the set of all integers $k$ in the range from $1$ to the conductor of
##  <F> such that the field automorphism induced by raising roots of unity
##  in <F> to the $k$-th power acts trivially on <F>.
##
DeclareAttribute( "GaloisStabilizer", IsAbelianNumberField );

InstallIsomorphismMaintenance( GaloisStabilizer,
    IsField and IsAbelianNumberField, IsField );


#############################################################################
##
#A  NormalBase( <F> )
##
##  is a list of basis vectors of <F> that consists of conjugate elements.
##
DeclareAttribute( "NormalBase", IsField );


#############################################################################
##
#A  PrimitiveElement( <D> )
##
##  is an element of <D> that generates <D> as a division ring together with
##  the left acting domain.
##
DeclareAttribute( "PrimitiveElement", IsDivisionRing );


#############################################################################
##
#A  PrimitiveRoot( <F> )
##
##  A primitive root of a finite field is a generator of its multiplicative
##  group.
##
DeclareAttribute( "PrimitiveRoot", IsField and IsFinite );


#############################################################################
##
#A  RootOfDefiningPolynomial( <F> )
##
##  is a root in the field <F> of its defining polynomial as a field
##  extension over the left acting domain of <F>.
##
DeclareAttribute( "RootOfDefiningPolynomial", IsField );


#############################################################################
##
#O  AsDivisionRing( <C> )
#O  AsDivisionRing( <F>, <C> )
#O  AsField( <C> )
#O  AsField( <F>, <C> )
##
##  If the collection <C> can be regarded as a division ring then
##  `AsDivisionRing( <C> )' is the division ring that consists of the
##  elements of <C>, viewed as a vector space over its prime field;
##  otherwise `fail' is returned.
##
##  In the second form, if <F> is a division ring contained in <C> then
##  the returned division ring is viewed as a vector space over <F>.
##
##  `AsField' is just a synonym for `AsDivisionRing'.
##
DeclareOperation( "AsDivisionRing", [ IsCollection ] );
DeclareOperation( "AsDivisionRing", [ IsDivisionRing, IsCollection ] );

DeclareSynonym( "AsField", AsDivisionRing );


#############################################################################
##
#O  ClosureDivisionRing( <D>, <r> )
#O  ClosureDivisionRing( <D>, <C> )
##
##  For a division ring <D> and either an element <r> of its elements family
##  or a collection <C>,
##  `ClosureDivisionRing' returns the division ring generated by both
##  arguments.
##
DeclareOperation( "ClosureDivisionRing", [ IsDivisionRing, IsObject ] );


#############################################################################
##
#A  Subfields( <F> )
##
##  is the set of all subfields of the field <F>.
#T or shall we allow to ask, e.g., for subfields of quaternion algebras?
##
DeclareAttribute( "Subfields", IsField );


#############################################################################
##
#O  FieldExtension( <F>, <poly> )
##
##  is the field obtained on adjoining a root of the irreducible polynomial
##  <poly> to the field <F>.
##
DeclareOperation( "FieldExtension", [ IsField, IsUnivariatePolynomial ] );


#############################################################################
##
#O  Conjugates( <F>, <z> )  . . . . . . . . . . conjugates of a field element
#O  Conjugates( <z> )
##
##  returns the conjugates of <z> in <F>. This is the orbit of <z> under the
##  Galois group of <F>. The second form computes the conjugates of <z> over
##  the appropriate prime field.
##
DeclareOperation( "Conjugates", [ IsField, IsScalar ] );


#############################################################################
##
#O  Norm( <F>, <z> ) . . . . . . . . . . . . . . .  trace of a field element
#O  Norm( <z> )
##
##  The norm of a field element is the product of all its conjugates. It is an
##  element of the field field fixed by the Galois group.
DeclareOperation( "Norm", [ IsField, IsScalar ] );


#############################################################################
##
#O  Trace( <F>, <z> ) . . . . . . . . . . . . . . .  trace of a field element
#O  Trace( <z> )
#O  Trace( <mat> )  . . . . . . . . . . . . . . . . . . . . trace of a matrix
##
##  The trace of a field element is the sum of all its conjugates.
##  It is an element of the field field fixed by the Galois group.
##
##  The trace of a matrix is the sum of its diagonal entries.
##
DeclareOperation( "Trace", [ IsField, IsScalar ] );


#############################################################################
##
#A  ComplexConjugate( <z> )
##
##  For a cyclotomic number <z>, `ComplexConjugate' returns
##  `GaloisCyc( <z>, -1 )'.
##  For a quaternion $<z> = c_1 e + c_2 i + c_3 j + c_4 k$,
##  `ComplexConjugate' returns $c_1 e - c_2 i - c_3 j - c_4 k$.
##
DeclareAttribute( "ComplexConjugate", IsScalar );


#############################################################################
##
#F  TracePolynomial( <B>, <F>, <z> [,<inum>] )
##
##  returns a polynomial that is the product of $(X - c)$ where $c$ runs
##  over the conjugates of <z> in the field extension <F> over <B>.
##  The polynomial is returned as a univariate polynomial over <B> in the
##  indeterminate number <inum> (defaulting to 1).
##
DeclareOperation("TracePolynomial",[IsField,IsField,IsScalar,IsPosInt]);


#############################################################################
##
#O  DivisionRingByGenerators( [ <z>, ... ] )  . . . . div. ring by generators
#O  DivisionRingByGenerators( <F>, [ <z>, ... ] ) . . div. ring by generators
##
##  The first version returns a division ring as vector space over
##  `FieldOverItselfByGenerators( <gens> )'.
##
DeclareOperation( "DivisionRingByGenerators",
        [ IsDivisionRing, IsCollection ] );

DeclareSynonym( "FieldByGenerators", DivisionRingByGenerators );


#############################################################################
##
#O  FieldOverItselfByGenerators( [ <z>, ... ] )
##
##  This  operation is  needed for  the  call of `Field' or
##  `FieldByGenerators'
##  without  explicitly given subfield, in  order to construct  a left acting
##  domain for such a field.
##
DeclareOperation( "FieldOverItselfByGenerators", [ IsCollection ] );


#############################################################################
##
#O  DefaultFieldByGenerators( [ <z>, ... ] )  . . default field by generators
##
DeclareOperation( "DefaultFieldByGenerators", [ IsCollection ] );


#############################################################################
##
#F  Field( <z>, ... ) . . . . . . . . . field generated by a list of elements
#F  Field( [ <z>, ... ] )
#F  Field( <F>, [ <z>, ... ] )
##
##  constructs the field $E$ generated by the elements $<z>, \ldots$.
##  If no base field <F> is given, it is constructed as a field over itself,
##  i.e. the left acting domain of $E$ is $E$.
##  In the third form, `Field' constructs the field $E$ generated by <F>
##  and $<z>, \ldots$, as a field over <F>.
##
DeclareGlobalFunction( "Field" );
#T why not `DivisionRing', and `Field' as a (more or less) synonym?


#############################################################################
##
#F  DefaultField( <z>, ... )  . . . . . default field containing a collection
#F  DefaultField( [ <z>, ... ] )
##
DeclareGlobalFunction( "DefaultField" );


#############################################################################
##
#F  Subfield( <F>, <gens> ) . . . . . . . subfield of <F> generated by <gens>
#F  SubfieldNC( <F>, <gens> )
##
##  Constructs the subfield of <F> generated by <gens>.
##
DeclareGlobalFunction( "Subfield" );
DeclareGlobalFunction( "SubfieldNC" );


#############################################################################
##
#M  IsSubsetLocallyFiniteGroup( <G> ) . . . . . . . . . .  for magmas of ffes
##
InstallTrueMethod( IsSubsetLocallyFiniteGroup, IsFFECollection and IsMagma );


#############################################################################
##
#E

