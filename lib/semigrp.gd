#############################################################################
##
#W  semigrp.gd                  GAP library                     Thomas Breuer
##
#H  @(#)$Id$
##
#Y  Copyright (C)  1997,  Lehrstuhl D fuer Mathematik,  RWTH Aachen,  Germany
#Y  (C) 1998 School Math and Comp. Sci., University of St.  Andrews, Scotland
##
##  This file contains the declaration of operations for semigroups.
##
Revision.semigrp_gd :=
    "@(#)$Id$";


#############################################################################
##
#P  IsSemigroup( <D> )
##
##  A *semigroup* is a magma (see~"Magmas") with associative multiplication.
##
DeclareSynonymAttr( "IsSemigroup", IsMagma and IsAssociative );


#############################################################################
##
#F  Semigroup( <gen1>, <gen2> ... ) . . . . semigroup generated by collection
#F  Semigroup( <gens> ) . . . . . . . . . . semigroup generated by collection
##
##  In the first form, `Semigroup' returns the semigroup generated by the
##  arguments <gen1>, <gen2> ...,
##  that is, the closure of these elements under multiplication.
##  In the second form, `Semigroup' returns the semigroup generated by the
##  elements in the homogeneous list <gens>;
##  a square matrix as only argument is treated as one generator,
##  not as a list of generators.
##
##  It is *not* checked whether the underlying multiplication is associative,
##  use `Magma' (see~"Magma") and `IsAssociative' (see~"IsAssociative")
##  if you want to check whether a magma is in fact a semigroup.
##
DeclareGlobalFunction( "Semigroup" );


#############################################################################
##
#F  Subsemigroup( <S>, <gens> ) . . .  subsemigroup of <S> generated by <gens>
#F  SubsemigroupNC( <S>, <gens> ) . .  subsemigroup of <S> generated by <gens>
##
##  are just synonymes of `Submagma' and `SubmagmaNC', respectively
##  (see~"Submagma").
##
DeclareSynonym( "Subsemigroup", Submagma );

DeclareSynonym( "SubsemigroupNC", SubmagmaNC );


#############################################################################
##
#O  SemigroupByGenerators( <gens> ) . . . . . . semigroup generated by <gens>
##
##  is the underlying operation of `Semigroup' (see~"Semigroup").
##
DeclareOperation( "SemigroupByGenerators", [ IsCollection ] );


#############################################################################
##
#A  AsSemigroup( <C> )  . . . . . . . .  collection <C> regarded as semigroup
##
##  If <C> is a collection whose elements form a semigroup
##  (see~"IsSemigroup") then `AsSemigroup' returns this semigroup.
##  Otherwise `fail' is returned.
##
DeclareAttribute( "AsSemigroup", IsCollection );


#############################################################################
##
#O  AsSubsemigroup( <D>, <C> )
##
##  Let <D> be a domain and <C> a collection.
##  If <C> is a subset of <D> that forms a semigroup then `AsSubsemigroup'
##  returns this semigroup, with parent <D>.
##  Otherwise `fail' is returned.
##
DeclareOperation( "AsSubsemigroup", [ IsDomain, IsCollection ] );


#############################################################################
##
#A  GeneratorsOfSemigroup( <S> ) . . .  semigroup generators of semigroup <S>
##
##  Semigroup generators of a semigroup <D> are the same as magma generators
##  (see~"GeneratorsOfMagma").
##
DeclareSynonymAttr( "GeneratorsOfSemigroup", GeneratorsOfMagma );


#############################################################################
##
#F  FreeSemigroup( <rank> )
#F  FreeSemigroup( <rank>, <name> )
#F  FreeSemigroup( <name1>, <name2>, ... )
#F  FreeSemigroup( <names> )
#F  FreeSemigroup( infinity, <init> )
##
##  Called in the first form, `FreeSemigroup' returns a free semigroup on
##  <rank> generators.
##  Called in the second form, `FreeSemigroup' returns a free semigroup on
##  <rank> generators, printed as `<name>1', `<name>2' etc.,
##  that is, each name is the concatenation of the string <name> and an
##  integer from `1' to <range>.
##  Called in the third form, `FreeSemigroup' returns a free semigroup on
##  as many generators as arguments, printed as <name1>, <name2> etc.
##  Called in the fourth form, `FreeSemigroup' returns a free semigroup on
##  as many generators as the length of the list <names>, the $i$-th
##  generator being printed as `<names>[$i$]'.
##  Called in the fifth form, `FreeSemigroup' returns a free semigroup on
##  infinitely many generators, where the first generators are printed
##  by the names in the list <init>, and the other generators by <name>
##  and an appended number.
##
DeclareGlobalFunction( "FreeSemigroup" );


#############################################################################
##
#E

