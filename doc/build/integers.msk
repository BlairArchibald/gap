%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%A  integers.msk                GAP documentation            Martin Schoenert
%A                                                           Alexander Hulpke
%%
%A  @(#)$Id$
%%
%Y  (C) 1998 School Math and Comp. Sci., University of St.  Andrews, Scotland
%%
\Chapter{Integers}

One of the most fundamental datatypes in every programming language is
the integer type.  {\GAP} is no exception.

{\GAP} integers are entered as a sequence of decimal digits
optionally preceded by a '+' sign for positive integers or a '-' sign for
negative integers.
The size of integers in {\GAP} is only limited by the amount of available
memory, so you can compute with integers having thousands of digits.

\beginexample
gap> -1234;
-1234
gap> 123456789012345678901234567890123456789012345678901234567890;
123456789012345678901234567890123456789012345678901234567890 
\endexample


Many more functions that are mainly related to the prime residue group of
integers modulo an integer are described in chapter~"Number Theory",
and functions dealing with combinatorics can be found
in chapter~"Combinatorics".


\Declaration{Integers}
\beginexample
gap> Size( Integers ); 2 in Integers;
infinity
true
\endexample

\Declaration{IsIntegers}
\beginexample
gap> IsIntegers( Integers );  IsIntegers( Rationals );  IsIntegers( 7 );
true
false
false
\endexample

`Integers' is a subset of `Rationals', which is a subset of `Cyclotomics'.
See Chapter~"Cyclotomic Numbers" for arithmetic operations and comparison of
integers.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Elementary Operations for Integers}

\Declaration{IsInt}
\Declaration{IsPosInt}
\Declaration{Int}

\Declaration{IsEvenInt}
\Declaration{IsOddInt}

\Declaration{AbsInt}
\index{absolute value of an integer}
\beginexample
gap> AbsInt( 33 );
33
gap> AbsInt( -214378 );
214378
gap> AbsInt( 0 );
0
\endexample

\Declaration{SignInt}
\index{sign!of an integer}
\beginexample
gap> SignInt( 33 );
1
gap> SignInt( -214378 );
-1
gap> SignInt( 0 );
0
\endexample

\Declaration{LogInt}
\beginexample
gap> LogInt( 1030, 2 );
10        # 2^10 = 1024
gap> LogInt( 1, 10 );
0
\endexample

\Declaration{RootInt}
\index{root!of an integer}\index{square root!of an integer}
\beginexample
gap> RootInt( 361 );
19
gap> RootInt( 2 * 10^12 );
1414213
gap> RootInt( 17000, 5 );
7        # 7^5 = 16807
\endexample

\Declaration{SmallestRootInt}
\index{root!of an integer, smallest}
\beginexample
gap> SmallestRootInt( 2^30 );
2
gap> SmallestRootInt( -(2^30) );
-4        # note that $(-2)^{30} = +(2^{30})$
gap> SmallestRootInt( 279936 );
6
gap> LogInt( 279936, 6 );
7
gap> SmallestRootInt( 1001 );
1001
\endexample


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Quotients and Remainders}

\Declaration{QuoInt}
\index{integer part of a quotient}
\beginexample
gap> QuoInt(5,3);  QuoInt(-5,3);  QuoInt(5,-3);  QuoInt(-5,-3);
1
-1
-1
1
\endexample

\Declaration{BestQuoInt}
\beginexample
gap> BestQuoInt( 5, 3 );  BestQuoInt( -5, 3 );
2
-2
\endexample

\Declaration{RemInt}
\index{remainder of a quotient}
\beginexample
gap> RemInt(5,3);  RemInt(-5,3);  RemInt(5,-3);  RemInt(-5,-3);
2
-2
2
-2
\endexample

\Declaration{GcdInt}
\beginexample
gap> GcdInt( 123, 66 );
3
\endexample

\Declaration{Gcdex}
\beginexample
gap> Gcdex( 123, 66 );
rec(
  gcd := 3,
  coeff1 := 7,
  coeff2 := -13,
  coeff3 := -22,
  coeff4 := 41 )
      # 3 = 7*123 - 13*66, 0 = -22*123 + 41*66
gap> Gcdex( 0, -3 );
rec(
  gcd := 3,
  coeff1 := 0,
  coeff2 := -1,
  coeff3 := 1,
  coeff4 := 0 )
gap> Gcdex( 0, 0 );
rec(
  gcd := 0,
  coeff1 := 1,
  coeff2 := 0,
  coeff3 := 0,
  coeff4 := 1 )
\endexample

\Declaration{LcmInt}
\beginexample
gap> LcmInt( 123, 66 );
2706
\endexample

\Declaration{CoefficientsQadic}
\Declaration{CoefficientsMultiadic}

\Declaration{ChineseRem}
\index{chinese remainder}
\beginexample
gap> ChineseRem( [ 2, 3, 5, 7 ], [ 1, 2, 3, 4 ] );
53
gap> ChineseRem( [ 6, 10, 14 ], [ 1, 3, 5 ] );
103
\endexample
\begintt
gap> ChineseRem( [ 6, 10, 14 ], [ 1, 2, 3 ] );
Error, the residues must be equal modulo 2
\endtt

\Declaration{PowerModInt}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Prime Integers and Factorization}

\Declaration{Primes}
\beginexample
gap> Primes[1];
2
gap> Primes[100];
541
\endexample

\Declaration{IsPrimeInt}
\beginexample
gap> IsPrimeInt( 2^31 - 1 );
true
gap> IsPrimeInt( 10^42 + 1 );
false
\endexample

\Declaration{IsPrimePowerInt}
\beginexample
gap> IsPrimePowerInt( 31^5 );
true
gap> IsPrimePowerInt( 2^31-1 );
true        # $2^{31}-1$ is actually a prime
gap> IsPrimePowerInt( 2^63-1 );
false
gap> Filtered( [-10..10], IsPrimePowerInt );
[ -8, -7, -5, -3, -2, 2, 3, 4, 5, 7, 8, 9 ]
\endexample

\Declaration{NextPrimeInt}
\beginexample
gap> NextPrimeInt( 541 ); NextPrimeInt( -1 );
547
2
\endexample

\Declaration{PrevPrimeInt}
\beginexample
gap> PrevPrimeInt( 541 ); PrevPrimeInt( 1 );
523
-2
\endexample

\Declaration{FactorsInt}
\beginexample
gap> FactorsInt( -Factorial(6) );
[ -2, 2, 2, 2, 3, 3, 5 ]
gap> Set( FactorsInt( Factorial(13)/11 ) );
[ 2, 3, 5, 7, 13 ]
gap> FactorsInt( 2^63 - 1 );
[ 7, 7, 73, 127, 337, 92737, 649657 ]
gap> FactorsInt( 10^42 + 1 );
[ 29, 101, 281, 9901, 226549, 121499449, 4458192223320340849 ]
\endexample

\Declaration{PrintFactorsInt}
\beginexample
gap> PrintFactorsInt( Factorial( 7 ) ); Print( "\n" );
2^4*3^2*5*7
\endexample

\Declaration{PrimePowersInt}
\beginexample
gap> PrimePowersInt( Factorial( 7 ) );
[ 2, 4, 3, 2, 5, 1, 7, 1 ]
\endexample

\Declaration{DivisorsInt}
\index{divisors!of an integer}
\beginexample
gap> DivisorsInt( 1 ); DivisorsInt( 20 ); DivisorsInt( 541 );
[ 1 ]
[ 1, 2, 4, 5, 10, 20 ]
[ 1, 541 ]
\endexample


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Residue Class Rings}

\index{mod!for Integers}

\Declaration{ZmodnZ}
\Declaration{ZmodnZObj}
\beginexample
gap> r:= ZmodnZ(15);
(Integers mod 15)
gap> fam:=ElementsFamily(FamilyObj(r));;
gap> a:= ZmodnZObj(fam,9);
ZmodnZObj( 9, 15 )
gap> a+a;
ZmodnZObj( 3, 15 )
gap> Int(a+a);
3
\endexample

\Declaration{IsZmodnZObj}

The residue class rings are rings, thus all operations for rings (see
Chapter~"Rings") apply.
See also Chapters~"Finite fields" and "Number theory".


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%E

