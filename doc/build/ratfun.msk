%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%A  ratfun.msk                  GAP documentation            Alexander Hulpke
%A                                                           Frank Celler
%%
%A  @(#)$Id$
%%
%Y  (C) 1998 School Math and Comp. Sci., University of St.  Andrews, Scotland
%%
\Chapter{Polynomials and Rational Functions}

Let $R$ be a commutative ring-with-one. We call a free associative
algebra $A$ over $R$ a *polynomial ring* over $R$. The free generators of
$A$ are called *indeterminates*, they are usually denoted by
$x_1,x_2,\ldots$. The number of indeterminates is called the *rank* of $A$.
The elements of $A$ are called *polynomials*. Products of
indeterminates are called *monomials*, every
polynomial can be expressed as a finite sum of products of monomials with
ring elements in a form like
$r_{1,0}x_1+r_{1,1}x_1x_2+r_{0,1}x_2+\cdots$ with $r_{i,j}\in R$.

A polynomial ring of rank 1 is called an *univariate* polynomial ring, its
elements are *univariate polynomials*.

Polynomial rings of smaller rank
naturally embed in rings of higher rank; if $S$ is a subring of $R$ then a
polynomial ring over $S$ naturally embeds in a polynomial ring over $R$ of
the same rank.

Internally, indeterminates are represented by positive integers, but it is
possible to give names to them to have them printed in a nicer way. Beware,
however that there is not necessarily any relation between the way an
indeterminate is called and the way it is printed. See section
"Indeterminates" for details.

If $R$ is an integral domain, the polynomial ring $A$ over $R$ is an integral domain as well and one can
therefore form its quotient field $Q$. This field is called a *field of
rational functions*. Again $A$ embeds naturally into $Q$ and {\GAP} will
perform this embedding implicitly. (In fact it implements the ring of rational
functions over $R$.) To avoid problems with leading
coefficients, however, $R$ must be a unique factorization domain.

%%  The operations for rational functions were implemented by Frank Celler and
%%  Alexander Hulpke with help from Werner Nickel and Andrew Solomon.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Indeterminates}

\FileHeader{ringpoly}[2]

\Declaration{Indeterminate}
\beginexample
gap> a:=Indeterminate(GF(3));
x_1
gap> x:=Indeterminate(GF(3),"x");
x
gap> Indeterminate(GF(3),"x")=x;
false
gap> y:=Indeterminate(GF(3),"y");z:=Indeterminate(GF(3),"X");
y
X
gap> Indeterminate(GF(3),3);
y
gap> Indeterminate(GF(3),[y,z]);   
x
\endexample

\Declaration{IndeterminateNumberOfUnivariateRationalFunction}
\Declaration{IndeterminateOfUnivariateRationalFunction}
\beginexample
gap> IndeterminateNumberOfUnivariateRationalFunction(z);
4
gap> IndeterminateOfUnivariateRationalFunction(z^5+z);
X
\endexample

\Declaration{IndeterminateName}
\beginexample
gap> IndeterminateName(FamilyObj(x),3);
"y"
gap> HasIndeterminateName(FamilyObj(x),5);
false
gap> SetIndeterminateName(FamilyObj(x),10,"bla");
gap> Indeterminate(GF(3),10);
bla
\endexample

As a convenience there is a special method installed for `SetName' that will
assign a name to an indeterminate.
\beginexample
gap> a:=Indeterminate(GF(3),5);
x_5
gap> SetName(a,"ah");
gap> a^5+a;
ah+ah^5
\endexample

\Declaration{CIUnivPols}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Operations for Rational Functions}

Rational the rational functions form a field, therefore all arithmetic
operations are applicable to rational functions.

\>`<f> + <g>'{addition!rational functions}
\>`<f> - <g>'{subtraction!rational functions}
\>`<f> * <g>'{product!rational functions}
\>`<f> / <g>'{quotient!rational functions}

\beginexample
gap> x:=Indeterminate(Rationals,1);;y:=Indeterminate(Rationals,2);;
gap> f:=3+x*y+x^5;;g:=5+x^2*y+x*y^2;;
gap> a:=g/f;
(5+x_1^2*x_2+x_1*x_2^2)/(3+x_1*x_2+x_1^5)
\endexample

Note that the quotient `<f>/<g>' of two polynomials might be represented as
a rational function again. If <g> is known to divide <f> the call
`Quotient(<f>,<g>)' (see~"Quotient") should be used instead.

At the moment {\GAP} does not contain a proper multivariate Gcd algorithm.
Therefore it cannot be guaranteed that rational functions will always be
represented as a quotient of coprime polynomials. In certain unfortunate
situations this might lead to a degree explosion.

All polynomials as well as all the univariate polynomials in the same
indeterminate form subrings of this field. If two rational functions are
known to be in the same subring, the result will be expressed as element in
this subring.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Comparison of Rational Functions}

\>`<f> = <g>'{comparison!rational functions}

Two rational functions <f> and <g> are equal if the product
$`Numerator'(<f>)*`Denominator'(<g>)$ equals
$`Numerator'(<g>)*`Denominator'(<f>)$.

\beginexample
gap> x:=Indeterminate(Rationals,"x");;y:=Indeterminate(Rationals,"y");;
gap> f:=3+x*y+x^5;;g:=5+x^2*y+x*y^2;;
gap> a:=g/f;;
gap> b:=(g*f)/(f^2);;
gap> a=b;
true
\endexample

\>`<f> \< <g>'{smaller!rational functions}

The ordering of rational functions is defined in several steps. Monomials
(products of indeterminates) are sorted first by total-degree and then
lexicographically (see~"MonomialTotalDegreeLess"). Products of monomials
with ring elements (``terms'') are compared first by their monomials and
then by their coefficients.

\beginexample
gap> x<y; 
true
gap> x^2*y<x*y^2;                  
true
gap> x*y<x^2*y;
true
gap> x^2*y < 5* y*x^2;
true
\endexample
Polynomials are compared by comparing the largest terms in turn until they
differ. 
\beginexample
gap> x+y<y;
false
gap> x<x+1;
true
\endexample
Rational functions are compared by comparing the polynomial
$`Numerator'(<f>)*`Denominator'(<g>)$ with the polynomial
$`Numerator'(<g>)*`Denominator'(<f>)$. (As the ordering of monomials used by
{\GAP} is invariant under multiplication this is independent of common
factors in numerator and denominator.)
\beginexample
gap> f/g<g/f;
false
gap> f/g<(g*g)/(f*g);
false
\endexample

For univariate polynomials this reduces to an ordering first by total degree
and then lexicographically on the coefficients.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Properties and Attributes of Rational Functions}

\Declaration{IsRationalFunction}

\Declaration{NumeratorOfRationalFunction}
\Declaration{DenominatorOfRationalFunction}
\beginexample
gap> x:=Indeterminate(Rationals,1);;y:=Indeterminate(Rationals,2);;
gap> DenominatorOfRationalFunction((x*y+x^2)/y);
y
gap> NumeratorOfRationalFunction((x*y+x^2)/y);  
x^2+x*y
\endexample

\Declaration{IsPolynomial}
\beginexample
gap> IsPolynomial((x*y+x^2*y^3)/y);
true
gap> IsPolynomial((x*y+x^2)/y);
false
\endexample

\Declaration{AsPolynomial}
\beginexample
gap> AsPolynomial((x*y+x^2*y^3)/y);
x+x^2*y^2
\endexample

\Declaration{IsUnivariateRationalFunction}

\Declaration{IsUnivariatePolynomial}
\Declaration{CoefficientsOfUnivariatePolynomial}

\Declaration{IsLaurentPolynomial}
The attribute `CoefficientsOfLaurentPolynomial'
(see~"CoefficientsOfLaurentPolynomial") gives a compact representation as
laurent polynomial.

\Declaration{IsConstantRationalFunction}

All these tests are applicable to *every* rational function. Depending on the
internal representation of the rational function, however some of these
tests (in particular univariatness) might be expensive in some cases.

For reasons of performance within algorithms it can be useful to use other
attributes, which give a slightly more technical representation. See
section~"The Representations of Rational Functions" for details.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Univariate Polynomials}

Some of the operations are actually defined on the larger domain of Laurent
polynomials (see "Laurent Polynomials"). For this section you can simply
ignore the word ``Laurent'' if it occurs in a description.

\Declaration{UnivariatePolynomial}
\Declaration{UnivariatePolynomialByCoefficients}
\Declaration{DegreeOfLaurentPolynomial}
\beginexample
gap> p:=UnivariatePolynomial(Rationals,[1,2,3,4],1);
1+2*x+3*x^2+4*x^3
gap> UnivariatePolynomialByCoefficients(FamilyObj(1),[9,2,3,4],73);
9+2*x_73+3*x_73^2+4*x_73^3
gap> CoefficientsOfUnivariatePolynomial(p);
[ 1, 2, 3, 4 ]
gap> DegreeOfLaurentPolynomial(p);
3
gap> IndeterminateNumberOfLaurentPolynomial(p);
1
gap> IndeterminateOfLaurentPolynomial(p);      
x
\endexample

We remark that some functions for multivariate polynomials (which will be
defined in the following sections) permit a different syntax for univariate
polynomials which drops the requirement to specify the indeterminate.
Examples are `Value', `Discriminant', `Derivative', `LeadingCoefficient' and
`LeadingMonomial':
\beginexample
gap> Value(p,Z(5));
Z(5)^2
gap> LeadingCoefficient(p);
4
gap> Derivative(p);
2+6*x+12*x^2
\endexample

\Declaration{RootsOfUPol}
\beginexample
gap> RootsOfUPol(50-45*x-6*x^2+x^3);
[ 10, 1, -5 ]
\endexample

\Declaration{UnivariatenessTestRationalFunction}

The info class for univariate polynomials is `InfoPoly'.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Polynomials as Univariate Polynomials in one Indeterminate}

\Declaration{DegreeIndeterminate}
\beginexample
gap> f:=x^5+3*x*y+9*y^7+4*y^5*x+3*y+2;
2+3*y+3*x*y+x^5+4*x*y^5+9*y^7
gap> DegreeIndeterminate(f,1);
5
gap> DegreeIndeterminate(f,y);
7
\endexample

\Declaration{PolynomialCoefficientsOfPolynomial}
\beginexample
gap> PolynomialCoefficientsOfPolynomial(f,2);
[ 2+x^5, 3+3*x, 0, 0, 0, 4*x, 0, 9 ]
\endexample

\Declaration{LeadingCoefficient}
\Declaration{LeadingMonomial}
\beginexample
gap> LeadingCoefficient(f,1);
1
gap> LeadingCoefficient(f,2);
9
gap> LeadingMonomial(f);
[ 2, 7 ]
gap> LeadingCoefficient(f);                  
9
\endexample

\Declaration{Derivative}
\beginexample
gap> Derivative(f,2);
3+3*x+20*x*y^4+63*y^6
\endexample
\Declaration{Discriminant}
\beginexample
gap> Discriminant(f,1);
50000+300000*y+675000*y^2+675000*y^3+253125*y^4+62208*y^5+900000*y^7+
4050000*y^8+6489720*y^9+3037500*y^10+1105920*y^13+6075000*y^14+18225000*y^15+
13668750*y^16+1474560*y^17+19208040*y^21+27337500*y^22+262144*y^25+20503125*y^
28
\endexample

\Declaration{Resultant}
\beginexample
gap> Resultant(x^4+y,y^4+x,1);
y+y^16
gap> Resultant(x^4+y,y^4+x,2);
x+x^16
\endexample

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Multivariate Polynomials}

\Declaration{Value}
\beginexample
gap> Value(x*y+y+x^7,[x,y],[5,7]);
78167
\endexample
Note that the default values for `one' can lead to different results than
one would expect: For example for a matrix $M$, the values $M+M^0$ and $M+1$
are *different*. As `Value' defaults to the one of the coefficient ring,
when evaluating Matrices in polynomials always the correct `one' should be
given!

\Declaration{OnIndeterminates}
\beginexample
gap> OnIndeterminates(x^7*y+x*y^4,(1,17)(2,28)); 
x_17*x_28^4+x_17^7*x_28
gap> Stabilizer(Group((1,2,3,4),(1,2)),x*y,OnIndeterminates);
Group( [ (1,2), (3,4) ] )
\endexample

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Characteristic Polynomials}

\Declaration{CharacteristicPolynomial}
\beginexample
gap> CharacteristicPolynomial(Rationals,[[2,0],[0,2]],2);
4-4*y+y^2
\endexample

\Declaration{MinimalPolynomial}
\beginexample
gap> MinimalPolynomial(Rationals,[[2,0],[0,2]]);
-2+x
\endexample

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Cyclotomic Polynomials}

\Declaration{CyclotomicPolynomial}
\Declaration{CyclotomicPol}
\beginexample
gap> CyclotomicPolynomial(Rationals,5);
1+x+x^2+x^3+x^4
gap> CyclotomicPol(5);                 
[ 1, 1, 1, 1, 1 ]
\endexample

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Polynomial Factorization}

At the moment {\GAP} provides only methods to factorize univariate
polynomials over finite fields and over the field of rational numbers.

\>Factors([<R>,]<upoly>[,<opt>])!{of univariate polynomial}

returns a list of the irreducible factors of the univariate polynomial
<upoly> in the polynomial ring <R>. (That is factors over the
`CoefficientsRing' of <R>.)

It is possible to pass a record <opt> as a third
argument. This record can contain the following components:
\beginitems
`onlydegs'&is a set of positive integers. The factorization assumes
that all irreducible factors have a degree in this set.

`stopdegs'&is a set of positive integers. The factorization will stop once a
factor of degree in `stopdegs' has been found and will return the
factorization found so far.
\enditems

\Declaration{FactorsSquarefree}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Polynomials over the Rationals}

The following functions are only available to polynomials with rations
coefficients:

\Declaration{PrimitivePolynomial}

The following operations are used by {\GAP} inside the factorization algorithm
but might be of interest also in other contexts.
\Declaration{BombieriNorm}
\Declaration{MinimizedBombieriNorm}
\Declaration{HenselBound}
\Declaration{OneFactorBound}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Laurent Polynomials}

A univariate polynomial can be written in the form $r_0+r_1x+\cdots+r_nx^n$
with $r_i\in R$.  Formally, there is no reason to start with 0, if $m$ is an
integer, we can consider objects of the form
$r_mx^m+r_{m+1}x^{m+1}+\cdots+r_nx^n$. We call these *Laurent polynomials*.
Laurent polynomials also can be considered as quotients of a univariate
polynomial by a power of the indeterminate.  The addition and multiplication
of univariate polynomials extends to Laurent polynomials (though it might be
impossible to interpret a Laurent polynomial as a function) and many
functions for univariate polynomials extend to laurent polynomials (or
extended versions for laurent polynomials exist).

\Declaration{LaurentPolynomialByCoefficients}
\Declaration{CoefficientsOfLaurentPolynomial}
\beginexample
gap> p:=LaurentPolynomialByCoefficients(FamilyObj(1),
> [1,2,3,4,5],-2);
x^-2+2*x^-1+3+4*x+5*x^2
gap> NumeratorOfRationalFunction(p);DenominatorOfRationalFunction(p);
1+2*x+3*x^2+4*x^3+5*x^4
x^2
gap> CoefficientsOfLaurentPolynomial(p*p);
[ [ 1, 4, 10, 20, 35, 44, 46, 40, 25 ], -4 ]
\endexample

\Declaration{IndeterminateNumberOfLaurentPolynomial}

\Declaration{QuotRemLaurpols}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Polynomial Rings}

While polynomials depend only on the family of the coefficients, polynomial
rings $A$ are defined over a base ring $R$. A polynomial is an element of
$A$ if and only if all its coefficents are contained in $R$. Besides
providing domains and an easy way to create polynomials, polynomial rings
can affect the behavior of operations like factorization into irreducibles.

\Declaration{PolynomialRing}
\Declaration{IndeterminatesOfPolynomialRing}
\Declaration{CoefficientsRing}
\beginexample
gap> r:=PolynomialRing(GF(7));
<algebra-with-one over GF(7), with 1 generators>
gap>  r:=PolynomialRing(GF(7),3);
PolynomialRing(..., [ x_1, x_2, x_3 ])
gap> IndeterminatesOfPolynomialRing(r);
[ x_1, x_2, x_3 ]
gap> r2:=PolynomialRing(GF(7),[5,7,12]);
PolynomialRing(..., [ x_5, x_7, x_12 ])
gap> CoefficientsRing(r);
GF(7)
gap> r:=PolynomialRing(GF(7),3);
PolynomialRing(..., [ x_1, x_2, x_3 ])
gap> r2:=PolynomialRing(GF(7),3,IndeterminatesOfPolynomialRing(r));
PolynomialRing(..., [ x_4, x_5, x_6 ])
gap> r:=PolynomialRing(GF(7),["x","y","z","z2"]);                           
PolynomialRing(..., [ x, y, z, z2 ])
\endexample

As {\GAP} objects polynomials can exist without a polynomial being defined
and polynomials cannot be associated to a particular polynomial ring.
(Dividing a polynomial which is in a polynomial ring over the integers by
another integer will result in a polynomial over the rationals, not in a
rational function over the integers.)

\Declaration{IsPolynomialRing}
\Declaration{IsFiniteFieldPolynomialRing}
\Declaration{IsRationalsPolynomialRing}

\beginexample
gap> IsPolynomialRing(r);
true
gap> IsFiniteFieldPolynomialRing(r);
true
gap> IsRationalsPolynomialRing(r);  
false
\endexample

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Univariate Polynomial Rings}

\Declaration{UnivariatePolynomialRing}
\Declaration{IsUnivariatePolynomialRing}
\beginexample
gap> r:=UnivariatePolynomialRing(Rationals,"x");
<algebra-with-one over Rationals, with 1 generators>
gap> r2:=PolynomialRing(Rationals,["q"]); 
<algebra-with-one over Rationals, with 1 generators>
gap> IsUnivariatePolynomialRing(r);
true
gap> IsUnivariatePolynomialRing(r2);
true
\endexample

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Polynomial Reduction}

\Declaration{PolynomialReduction}

The polynomial reduction requires an ordering on monomials. This must be a
function that takes two monomials (in the form of lists as described in "The
Defining Attributes of Rational Functions") and returns whether one is
smaller than the other.

Normally the ordering chosen should be *admissible*, i.e. it
must be compatible with products: If $a\<b$ then $ca\<cb$ for all monomials
$a,b$ and $c$.

Currently two admissible orderings are available:
\Declaration{MonomialTotalDegreeLess}
\Declaration{MonomialRevLexicoLess}

\beginexample
gap> x:=X(Rationals,"x");;y:=X(Rationals,"y");;z:=X(Rationals,"z");;
gap> bas:=[x^3*y*z,x*y^2*z,z*y*z^3+x];
[ x^3*y*z, x*y^2*z, x+y*z^4 ]
gap> PolynomialReduction(x^7*z*bas[1]+y^5*bas[3]+x*z,bas,                      
> MonomialTotalDegreeLess);
[ x*z, [ x^7*z, 0, y^5 ] ]
\endexample

\Declaration{LeadingMonomialPosExtRep}

At the moment {\GAP} does not contain any facilities to compute
Gr{\accent127 o}bner bases.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Rational Function Families}

All rational functions definend over a ring lie in the same family, the
rational functions family over this ring.

In {\GAP} therefore the family of a polynomial depends only on the family of
the coefficients, all polynomials whose coefficients lie in the same family
are ``compatible''.

\Declaration{RationalFunctionsFamily}
\Declaration{IsRationalFunctionsFamily}
\begintt
gap> fam:=RationalFunctionsFamily(FamilyObj(1)); 
NewFamily( "RationalFunctionsFamily(...)", [ 618, 620 ], 
[ 82, 85, 89, 93, 97, 100, 103, 107, 111, 618, 620 ] )
\endtt

\Declaration{CoefficientsFamily}

{\GAP} does *not* embed the base ring in the polynomial ring. While
multiplication and addition of base ring elements to rational functions
return the expected results, polynomials and rational functions are not
equal.
\beginexample
gap> 1=Indeterminate(Rationals)^0;
false
\endexample

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{The Representations of Rational Functions}

{\GAP} uses three representations of rational functions: Rational
functions given by numerator and denominator, polynomials and
Laurent polynomials (given by coefficient list and valuation).

These representations do not necessarily reflect mathematical properties:
While an object in the laurent polynomials reprepresentation must be a
laurent polynomial it might turn out that a rational function given by
numerator and denominator is actually a laurent polynomial and the property
tests in section~"Properties and Attributes of Rational Functions" will find
this out.

Each representation is associated one or several ``defining attributes''
that give an ``external'' representation of the representation in the form
of lists and are the defining information that tells a rational function
what it is.

{\GAP} also implements methods to compute these attributes for rational
functions in *other* representations, provided it would be possible to
express an *mathematically equal* rational function in the representation
associated with the attribute. (That is one can always get a
numerator/denominator representation of a polynomial while an arbitrary
function of course can compute a polynomial representation only if it is a
polynomial.)

Therefore these attributes can be thought of as ``conceptual''
representations that allow us -- as far as possible --
to consider an object as a rational function, a polynomial or a laurent
polynomial, regardless of the way it is represented in the computer.

Functions thus usually do not need to care about the representation of
a rational function. Depending on its (known in the context or determined)
properties, they can access the attribute representing the rational function
in the desired way.

Consequentially, methods for rational functions are installed for properties
and not for representations.

When *creating* new rational functions however they must be created in one
of the three representations. In most cases this will be the representation
for which the ``conceptual'' representation in which the calculation was done
is the defining attribute.

Iterated operations (like forming the product over a list) therefore will
tend to stay in the most suitable representation and the calculation of
another conceptual representation (which may be comparatively expensive in
certain circumstances) is not necessary.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{The Defining Attributes of Rational Functions}

In general, rational functions are given in terms of monomials. They are
represented by lists, using numbers (see~"Indeterminates") for the
indeterminates.

\FileHeader{ratfun}[4]
\FileHeader{ratfun}[1]

\Declaration{IsRationalFunctionDefaultRep}
\Declaration{ExtRepNumeratorRatFun}
\Declaration{ExtRepDenominatorRatFun}
\Declaration{ZeroCoefficientRatFun}

\Declaration{IsPolynomialDefaultRep}
\Declaration{ExtRepPolynomialRatFun}

\Declaration{IsLaurentPolynomialDefaultRep}
The attributes that give a representation of a a rational function as a laurent polynomial are
`CoefficientsOfLaurentPolynomial' (see~"CoefficientsOfLaurentPolynomial")
and `IndeterminateNumberOfUnivariateRationalFunction'
(see~"IndeterminateNumberOfUnivariateRationalFunction").

\FileHeader{ratfun}[2]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Creation of Rational Functions}

\FileHeader{ratfun}[3]

\Declaration{RationalFunctionByExtRep}
\Declaration{PolynomialByExtRep}
\beginexample
gap> fam:=RationalFunctionsFamily(FamilyObj(1));;
[ 82, 85, 89, 93, 97, 100, 103, 107, 111, 618, 620 ] )
gap> p:=PolynomialByExtRep(fam,[[1,2],1,[2,1,9,7],3]);
x^2+3*y*x_9^7
gap> q:=p/(p+1); 
(x^2+3*y*x_9^7)/(1+x^2+3*y*x_9^7)
gap> ExtRepNumeratorRatFun(q);
[ [ 1, 2 ], 1, [ 2, 1, 9, 7 ], 3 ]
gap> ExtRepDenominatorRatFun(q);
[ [  ], 1, [ 1, 2 ], 1, [ 2, 1, 9, 7 ], 3 ]
\endexample
\Declaration{LaurentPolynomialByExtRep}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Arithmetic for External Representations of Polynomials}

The following operations are used internally to perform the arithmetic for
polynomials in their ``external'' representation as lists.
\Declaration{ZippedSum}
\Declaration{ZippedProduct}
\Declaration{QuotientPolynomialsExtRep}

Functions to perform arithmetic with the coefficient lists of Laurent
polynomials are described in section~"Coefficient List Arithmetic".

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Cancellation Tests for Rational Functions}

{\GAP} does not contain a multivariate GCD algorithm. The following
operations are used internally to try to keep the denominators as small as
possible

\Declaration{RationalFunctionByExtRepWithCancellation}
\Declaration{TryGcdCancelExtRepPolynomials}
\Declaration{HeuristicCancelPolynomials}
