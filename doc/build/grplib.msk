%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%A  grplib.msk                  GAP documentation          Heiko Theissen
%A                                                         Volkmar Felsch
%A                                                         Bettina Eick
%A                                                         Alexander Hulpke
%A                                                         Hans Ulrich Besche
%%
%A  @(#)$Id$
%%
%Y  (C) 1998 School Math and Comp. Sci., University of St.  Andrews, Scotland
%%
\PreliminaryChapter{Group Libraries}

When you start {\GAP}, it  already knows several groups. Currently {\GAP}
initially knows the following groups:
\beginlist
  \item{$\bullet$} some basic groups, such  as cyclic groups or symmetric
    groups (see "Basic Groups"),
  \item{$\bullet$}  a library of  primitive  permutation groups of degree
    $\<1000$, complete  for degrees  $\<256$ (see "Primitive  permutation
    groups"),
  \item{$\bullet$}  the  irreducible solvable subgroups of  $GL(n,p)$ for
    $n>1$ and $p^n \< 256$ (also in "Primitive permutation groups"),
  \item{$\bullet$} the transitive permutation groups of degree at most 23
    (see "Transitive permutation groups"),
  \item{$\bullet$} the groups of small size (see "Small groups"),
  \item{$\bullet$}  the  finite perfect  groups of   size  at most $10^6$
    (excluding 11 sizes) (see "Finite perfect groups").
%\item{$\bullet$} the irreducible maximal finite integral matrix groups 
%  of dimension at most  24  (see  "Irreducible Maximal Finite Integral
%  Matrix Groups"),
%\item{$\bullet$} the  crystallographic  groups  of  dimension  at most  4 
%  (see "The Crystallographic Groups Library").
\endlist

There   is usually no   relation  between the   groups  in the  different
libraries and a group may occur in different libraries in different
incarnations.

Note that a system administrator may choose to install all, or
only a  few,  or even  none of the  libraries.  So some  of the libraries
mentioned below may not be available on your installation.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Basic Groups}

There are several infinite families of groups which are parametrized by
numbers. {\GAP} provides various functions to construct these groups. The
functions always permit (but do not require) one to indicate the category (for
example `IsPermGroup', `IsMatrixGroup' or `IsPcGroup') in which the group
should be constructed, there always is a default category corresponding to
a ``natural'' way to describe the groups. Note that not every group can be
constructed in every category, there may be theoretical restrictions
(`IsPcGroup' only works for solvable groups) or methods may be available
only for a few categories.

\Declaration{CyclicGroup}
\beginexample
gap> CyclicGroup(12);
<pc group of size 12 with 3 generators>
gap> CyclicGroup(IsPermGroup,12);
Group( [ ( 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12) ] )
\endexample

\Declaration{AbelianGroup}
\beginexample
gap> AbelianGroup([1,2,3]);
<pc group of size 6 with 2 generators>
\endexample

\Declaration{ElementaryAbelianGroup}
\beginexample
gap> ElementaryAbelianGroup(8192); 
<pc group of size 8192 with 13 generators>
\endexample

\Declaration{DihedralGroup}
\beginexample
gap> DihedralGroup(10);
<pc group of size 10 with 2 generators>
\endexample

\Declaration{ExtraspecialGroup}

\Declaration{AlternatingGroup}
\beginexample
gap> AlternatingGroup(5);
Alt([1..5])
\endexample

\Declaration{SymmetricGroup}
\beginexample
gap> SymmetricGroup(10); 
Sym([1..10])
\endexample

Note that permutation groups provide special treatment of symmetric and
alternating groups, see "Symmetric and Alternating Groups".

\Declaration{GeneralLinearGroup}
\beginexample
gap> GL(4,3);
GL(4,3)
\endexample

\Declaration{SpecialLinearGroup}
\beginexample
gap> SpecialLinearGroup(2,2);            
SL(2,2)
\endexample

Using the `OnLines' operation it is possible to obtain the corresponding
projective groups in a permutation action:

\beginexample
gap> g:=GL(4,3);;Size(g);
24261120
gap> pgl:=Operation(g,Orbit(g,Z(3)^0*[1,0,0,0],OnLines),OnLines);;
gap> Size(pgl);
12130560
\endexample

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Constructors for Basic Groups}

All functions described in the last section call constructor operations to
do the work. The constructors are called as the functions with an appended
`Const', so for example `CyclicGroup' calls the constructor

\){\fmark CyclicGroupCons(<cat>,<n>)}

Methods for this constructor are installed with the category, for which they
install, as requirement for the first parameter. Thus for example the method
that constructs cyclic groups in a permutation representation is installed
by

\begintt
InstallMethod( CyclicGroupCons, "regular perm group", true,
  [ IsPermGroup and IsRegularProp and IsFinite, IsInt and IsPosRat ], 0,
function( filter, n )
\endtt


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Selection Functions}

\)\fmark All<Library>Groups( $<fun>_1$, $<val>_1$, \dots\ )

For each of the following group library there  is a  *selection function*.
This function permits one to select all groups from the library that have a
given set of properties.

The name of the selection  functions always begins  with `All' and always
ends with `Groups'. Inbetween is a  name that hints at  the nature of the
group library. For example, the selection function for the library of all
primitive  groups (see  "Primitive   permutation groups") is called
`AllPrimitiveGroups'.

These  functions take an  arbitrary number of  pairs of  arguments.   The
first argument in such a pair  is a function  that can  be applied to the
groups in the library,  and the second  argument is either a single value
that this  function must return in  order  to have this group included in
the selection, or a list of such values. For example,
\begintt
AllPrimitiveGroups( DegreeOperation,  [10..15],
		    Size,             [1..100],
		    IsAbelian,        false    );
\endtt
returns a list of all primitive  groups with  degree between 10 and
15 and size less than 100 that are not abelian.

Thus  the `AllPrimitiveGroups'  behaves  as if   it was implemented  by a
function similar to the one defined below, where `PrimitiveGroupsList' is a
list of all primitive groups.  (Note that in  the definition below we assume
for simplicity that `AllPrimitiveGroups' accepts exactly 4 arguments.  It is
of course  obvious how to change this  definition so that the function would
accept a variable number of arguments.)

\begintt
AllPrimitiveGroups := function( fun1, val1, fun2, val2 )
local    groups, g, i;
  groups := [];
  for i  in [ 1 .. Length( PrimitiveGroupsList ) ] do
    g := PrimitiveGroupsList[i];
    if      fun1(g) = val1  or IsList(val1) and fun1(g) in val1
        and fun2(g) = val2  or IsList(val2) and fun2(g) in val2
     then
      Add( groups, g );
    fi;
  od;
  return groups;
end;

\endtt
Note that the real  selection functions are considerably  more difficult,
to improve the efficiency. Most  important, each recognizes a certain set
of properties which are precomputed for the library without having to
compute them anew for each group. This will substantially speed up the
selection process.
In the description of each library we will
list the properties that are stored for this library.

\)\fmark One<Library>Group( $<fun>_1$, $<val>_1$, \dots\ )

This function simply returns the first (in the stored order) group  in the
library that has the prescribed properties.
It returns `fail' if no such group exists in the library.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Primitive Permutation Groups}

{\GAP} contains a library of primitive permutation groups which includes the
following permutation groups up to permutation isomorphism (i.e., up to
conjugacy  in the corresponding symmetric group)
\beginlist
  \item{$\bullet$} the  non-affine primitive permutation groups of degree
    $\<1000$,   described    in  \cite{DixonMortimer88},  with generators
    calculated in \cite{Theissen97},
  \item{$\bullet$} all  primitive  permutation groups of  degree $\<256$,
    in particular,
    \itemitem{$\circ$} the primitive permutation groups up to degree~50,
      calculated by C.~Sims,
    \itemitem{$\circ$}  the solvable (hence affine) primitive permutation
      groups of degree $\<256$, calculated by M.~Short \cite{Sho92},
    \itemitem{$\circ$} the insolvable affine primitive permutation groups
      of degree $\<256$, calculated in \cite{Theissen97}.
\endlist
Note that the affine primitive permutation groups of degrees 256--999 are
not included.

\Declaration{PrimitiveGroup}
\Declaration{NrPrimitiveGroups}
\Declaration{NrAffinePrimitiveGroups}
\Declaration{NrSolvableAffinePrimitiveGroups}

\beginexample
gap> NrPrimitiveGroups(25);
28
gap> NrAffinePrimitiveGroups(25);
22
gap> NrSolvableAffinePrimitiveGroups(25);
19
gap> PrimitiveGroup(25,19);               
<permutation group of size 2400 with 5 generators>
gap> PrimitiveGroup(25,20);
5^2:GL(2,5)_1
gap> PrimitiveGroup(25,22);
5^2:GL(2,5)_3
gap> PrimitiveGroup(25,23);
L2,4 on projective points^2.1
\endexample

\Declaration{AffinePermGroupByMatrixGroup}
\Declaration{PrimitiveAffinePermGroupByMatrixGroup}
\beginexample
gap> g:=SL(3,2);;
gap> a:=AffinePermGroupByMatrixGroup(g);
2^3:SL(3,2)
gap> b:=PrimitiveAffinePermGroupByMatrixGroup(g);;      
gap> Length(GeneratorsOfGroup(a));Length(GeneratorsOfGroup(b));
5
3
\endexample

The selection functions (see "Selection functions") for the primitive
groups library are `AllPrimitiveGroups' and `OnePrimitiveGroup'.
%They
%obtain the following properties from the database without having to compute
%them anew:
%`NrMovedPoints', `Size',   `Transitivity', and `IsPrimitive'. 

\Declaration{PrimitiveGroupSims}
\Declaration{SimsNo}
\Declaration{SimsName}

\beginexample
gap> g:=PrimitiveGroup(25,2);
Group( [ ( 2,19)( 3,25)( 4, 7)( 5,13)( 8,20)( 9,12)(10,23)(14,22)(15,18)
    (17,24), ( 2,20, 7)( 3,22,13)( 4, 8,19)( 5,14,25)( 6,10,23)( 9,11,12)
    (15,16,18)(17,21,24), ( 1, 6,11,21,16)( 2, 7,12,22,17)( 3, 8,13,23,18)
    ( 4, 9,14,24,19)( 5,10,15,25,20) ] )
gap> SimsNo(g);
3
gap> SimsName(g);
"5^2:S_3"
gap> PrimitiveGroupSims(25,2);
5^2:6
gap> PrimitiveGroupSims(25,3);
5^2:S_3
\endexample

There are also selection functions `AllPrimitiveGroupSims' and
`OnePrimitiveGroupSims'.

\Declaration{IrreducibleSolvableGroup}

The corresponding selection functions are `AllIrreducibleSolvableGroups' and
`OneIrreducibleSolvableGroup'. They obtain the following properties from the
database without having to compute them anew:
`Dimension' for the linear  degree, `CharFFE' for the field characteristic,
`Size', `IsLinearlyPrimitive' and `MinimalBlockDimension'.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Transitive Permutation Groups}

The transitive groups library contains representatives for all transitive
permutation groups of degree at most  23.  Two permutations groups of the
same degree are considered to be equivalent, if there is a renumbering of
points, which maps one group into the other one.  In other words, if they
lie in the same  conjugacy class  under operation  of the  full symmetric
group by conjugation.

\Declaration{TransitiveGroup}
\Declaration{NrTransitiveGroups}

The selection functions (see "Selection functions") for the transitive
groups library are `AllTransitiveGroups' and `OneTransitiveGroup'. They
obtain the following properties from the database without having to compute
them anew:
`NrMovedPoints', `Size',   `Transitivity', and `IsPrimitive'. 

This library was computed by  Gregory Butler, John McKay, Gordon Royle
and Alexander Hulpke.  The list of transitive  groups up  to degree 11
was published in \cite{BM83},  the list of degree  12 was published in
\cite{Roy87}, degree 14 and  15 were published in  \cite{Butler93} and
degrees 16--22 in \cite{Hulpke96}.

The arrangement and the names of the groups of degree up to 15 is the same
as given in \cite{ConwayHulpkeMcKay98}. With the exception of the symmetric
and alternating group (which are represented as `SymmetricGroup' and
`AlternatingGroup') the generators for these groups also confirm to this
paper with the only difference that 0 (which is not permitted in {\GAP} for
permutations to act on) is always replaced by the degree.

\beginexample
gap> TransitiveGroup(10,22);
S(5)[x]2
gap> l:=AllTransitiveGroups(NrMovedPoints,12,Size,1440,IsSolvable,false);
[ S(6)[x]2, M_10.2(12) = A_6.E_4(12) = [S_6[1/720]{M_10}S_6]2 ]
gap> List(l,IsSolvable);
[ false, false ]
\endexample

\Declaration{TransitiveIdentification}
\beginexample
gap> TransitiveIdentification(Group((1,2),(1,2,3)));
2
\endexample

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Small Groups}

This library contains listings of all groups of certain orders up
to isomorphism. Currently, the groups of order at most 1000 except 512, 
the groups whose order is a product of at most 3 primes and the groups 
of order $2^n \cdot p$ for $n \leq 8$ and $p$ an odd prime are included 
in the catalogue.

The nilpotent groups have been computed by E. A. O'Brien, see 
\cite{NO89}, while the non-nilpotent groups have been determined 
by Hans Ulrich Besche and Bettina Eick, see \cite{BescheEick98}, 
\cite{BescheEick1000} and \cite{BescheEick768}. For a description
of the groups whose order has at most 3 prime factors, see
\cite{Neu67}.

Additionally to the catalogue of groups there exists an identification
routine for groups of small order; that is, a function that returns the
catalogue number of any given group of suitable order.

Note that the small groups library contains the GAP 3 libraries
`TwoGroups' and `ThreeGroups' without any changes. Moreover, the 
small groups library is a substitute for the GAP 3 library of 
solvable groups of order at most 100. However, these catalogues
are sorted differently.

The complete catalogue together with the identification routine
needs about 25 MB of space on a hard disk. Thus we have split the 
library in three layers. The first layer is always installed, since
it does not need much space. The second and third layers may be
ommitted in the installation, if necessary.  Moreover, the catalogue
and the identification routine can be installed independent of each
other.
\beginlist
   \item{$\bullet$} the groups of a size which is the product of at most 3
     primes,
   \item{$\bullet$} the remaining groups of size a most 1000 excluding 512,
     768,
   \item{$\bullet$} the groups of a size = $2^n * p$ with $n \leq 8$ and $p$
     an odd prime.
\endlist

\Declaration{SmallGroup}
\Declaration{NumberSmallGroups}
\Declaration{AllGroups}
\Declaration{IdsOfAllGroups}
\Declaration{OneGroup}
\Declaration{Gap3CatalogueGroup}
\Declaration{IdGroup}
\Declaration{Gap3CatalogueIdGroup}
\Declaration{UnloadSmallGroupsData}

\beginexample
gap> G := SmallGroup( 768, 1000000 );
<pc group with 9 generators>
gap> NumberSmallGroups( 512 );
10494213
gap> NumberSmallGroups( 768 );
1090235
gap> NumberSmallGroups( 2^8 * 5 );
1116461
gap> AllGroups( Size, 120, IsSolvableGroup, false );
[ Group([ ( 1, 2, 4, 8)( 3, 6, 9, 5)( 7,12,13,17)(10,14,11,15)(16,20,21,24)
        (18,22,19,23), ( 1, 3, 7)( 2, 5,10)( 4, 9,13)( 6,11, 8)(12,16,20)
        (14,18,22)(15,19,23)(17,21,24) ]), Group([ (1,2,3,4,5), (1,2) ]), 
  Group([ (1,2,3,5,4), (1,3)(2,4)(6,7) ]) ]
gap> IdsOfAllGroups( Size, 60, IsSupersolvableGroup, true );
[ [ 60, 1 ], [ 60, 2 ], [ 60, 3 ], [ 60, 4 ], [ 60, 6 ], [ 60, 7 ], 
  [ 60, 8 ], [ 60, 10 ], [ 60, 11 ], [ 60, 12 ], [ 60, 13 ] ]
gap> OneGroup( Size, [1..1000], IsSolvableGroup, false );
Group([ (1,2,3,4,5), (1,2,3) ])
gap> List( DerivedSeries( Gap3CatalogueGroup( 24, 15 ) ), Size );      
[ 24, 12, 4, 1 ]
gap> IdGroup( GL( 2,3 ) );
[ 48, 29 ]
gap> Gap3CatalogueIdGroup( GL( 2,3 ) );
[ 48, 49 ]
gap> UnloadSmallGroupsData();
\endexample

Note that for the groups of order 512 `NumberSmallGroups' is the
only catalogue function which will return a result. These groups
have been enumerated, but not determined yet.


%Authors of the GAP 3 catalogue of solvable groups:
%M. Hall and J. K. Senior, see \cite{HS64}, J. Neub{\accent127u}ser, 
%see \cite{Neu67}, and R. Laue, see \cite{Lau82})


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Finite Perfect Groups}
\index{perfect groups}%

The {\GAP} library of finite  perfect groups provides, up to isomorphism,
a list of all perfect groups whose sizes are less than  $10^6$  excluding
the following sizes:
\beginlist
  \item{$\bullet$}
      For $n = 61440$, 122880, 172032, 245760, 344064, 491520, 688128, or
      983040,  the perfect groups  of size  $n$  have not completely been
      determined yet.  The library  neither provides  the number of these
      groups nor the groups themselves.
  \item{$\bullet$}
      For  $n = 86016$,  368640,  or  737280,  the library  does not  yet
      contain  the perfect groups  of size  $n$,  it  only provides their
      their numbers which are 52, 46, or 54, respectively.
\endlist

Except for these eleven sizes, the list of altogether 1096 perfect groups
in the  library is complete. It  relies  on results  of Derek~F. Holt and
Wilhelm Plesken which  are published in their  book  {\it Perfect Groups}
\cite{HP89}. Moreover,   they     have  supplied us    with    files with
presentations of 488 of the groups. In terms of  these, the remaining 607
nontrivial groups in the library can be described as 276 direct products,
107  central   products, and 224  subdirect  products.  They are computed
automatically by suitable {\GAP} functions whenever they are needed.

We are grateful to Derek Holt and Wilhelm Plesken for making their groups
available to the {\GAP} community  by contributing their files. It should
be noted that  their book contains a  lot of further information for many
of the library groups.  So we would like  to recommend  it to any  {\GAP}
user who is interested in the groups.

The library has been brought into {\GAP} format by Volkmar Felsch.

\Declaration{SizesPerfectGroups}

\Declaration{PerfectGroup}
\beginexample
gap> G := PerfectGroup(IsPermGroup,6048,1);  
U3(3)
\endexample

As  all groups are stored  by presentations, a permutation representation
is obtained by coset enumeration. Note that some of the library groups do
not have a   faithful   permutation  representation  of small     degree.
Computations in these groups may be rather time consuming.
\beginexample
gap> G:=PerfectGroup(IsPermGroup,129024,2);
L2(8) N ( 2^6 E 2^1 A ) C 2^1
gap> NrMovedPoints(G);
14336
\endexample

\Declaration{PerfectIdentification}

\Declaration{NumberPerfectGroups}
\Declaration{NumberPerfectLibraryGroups}

\Declaration{SizeNumbersPerfectGroups}

\Declaration{DisplayInformationPerfectGroups}

\beginexample
gap> DisplayInformationPerfectGroups( 30720, 3 );
#I Perfect group 30720:  A5 ( 2^4 E N 2^1 E 2^4 ) A
#I   size = 2^11*3*5  orbit size = 240
#I   Holt-Plesken class 1 (9,3)
gap> DisplayInformationPerfectGroups( 30720, 6 );
#I Perfect group 30720:  A5 ( 2^4 x 2^4 ) C N 2^1
#I   centre = 2  size = 2^11*3*5  orbit size = 384
#I   Holt-Plesken class 1 (9,6)
gap> DisplayInformationPerfectGroups( Factorial( 8 ) / 2 );
#I Perfect group 20160.1:  A5 x L3(2) 2^1
#I   centre = 2  size = 2^6*3^2*5*7  orbit sizes = 5 + 16
#I   Holt-Plesken class 31 (1,1) (occurs also in class 32)
#I Perfect group 20160.2:  A5 2^1 x L3(2)
#I   centre = 2  size = 2^6*3^2*5*7  orbit sizes = 7 + 24
#I   Holt-Plesken class 31 (1,2) (occurs also in class 32)
#I Perfect group 20160.3:  ( A5 x L3(2) ) 2^1
#I   centre = 2  size = 2^6*3^2*5*7  orbit size = 192
#I   Holt-Plesken class 31 (1,3)
#I Perfect group 20160.4:  simple group  A8
#I   size = 2^6*3^2*5*7  orbit size = 8
#I   Holt-Plesken class 26 (0,1)
#I Perfect group 20160.5:  simple group  L3(4)
#I   size = 2^6*3^2*5*7  orbit size = 21
#I   Holt-Plesken class 27 (0,1)
\endexample

For any library  group  $G$, the library    files do not  only provide  a
presentation, but, in  addition, a list  of  one or more subgroups  $S_1,
\ldots,  S_r$  of   $G$ such   that   there is  a   faithful  permutation
representation  of $G$ of degree  $\sum_{i=1}^{r} [G:S_i]$ on the set $\{
S_i g \mid 1 \leq i \leq  r, \, g \in  G \}$ of  the cosets of the $S_i$.
This allows one to construct the groups as permutation groups. The
`DisplayInformationPerfectGroups'  function  displays  only the available
degree. The message
\begintt
    orbit size = 8
\endtt

in the above example means  that the available permutation representation
is transitive and of degree 8, whereas the message
\begintt
    orbit sizes = 5 + 16
\endtt
means that a nontransitive  permutation representation is available which
acts on two orbits of size 5 and 16 respectively.

The  notation used in  the ``description''  of  a  group is explained  in
section 5.1.2 of \cite{HP89}. We quote the respective page from there:

{\advance\leftskip by\manindent \advance\rightskip by\manindent
Within a class $Q\,\#\,p$, an isomorphism type  of groups will be denoted
by an  ordered pair of  integers $(r,n)$, where $r \geq  0$ and $n  > 0$.
More precisely, the isomorphism  types in $Q$ \# $p$  of order $p^r  \!\!
\mid  \!\! Q  \!\!  \mid$ will be  denoted by  $(r,1)$, $(r,2)$, $(r,3)$,
$\ldots\,$. Thus $Q$ will always get the size number $(0,1)$.

In  addition to the symbol $(r,n)$,  the groups in $Q  \,  {\sl \#} \, p$
will  also be given a  more descriptive name.  The purpose of  this is to
provide a very rough idea of  the structure of  the group.  The names are
derived in the following manner. First of all, the isomorphism classes of
irreducible  $F_pQ$-modules $M$ with $\mid \!\!  Q  \!\! \mid \mid \!\! M
\!\! \mid \,  \leq 10^6$,  where $F_p$ is   the field of  order $p$,  are
assigned symbols. These  will either  be simply $p^x$,  where $x$  is the
dimension of the module, or, if there is more  than one isomorphism class
of irreducible modules having the same dimension, they will be denoted by
$p^x$, $p^{x^\prime}$,  etc.   The one-dimensional  module   with trivial
$Q$-action  will therefore be denoted  by  $p^1$. These  symbols will  be
listed under the description of $Q$.  The group name consists essentially
of a list  of the composition factors  working from the  top of the group
downwards; hence  it always  starts with the  name  of $Q$ itself.  (This
convention is the most  convenient in our  context,  but it is  different
from that adopted  in the ATLAS \cite{CCN85}, for example,
where composition factors  are listed in the  reverse order. For example,
we denote a  group isomorphic to $SL(2,5)$  by  $A_5 2^1$ rather  than $2
\cdot A_5$.)

Some  other symbols are used  in the name, in order  to give some idea of
the   relationship  between these    composition  factors, and  splitting
properties. We shall now list these additional symbols.
\item{$\times$}  between  two  factors   denotes   a  direct  product  of
      $F_pQ$-modules or groups.
\item{C} (for ``commutator''  between two factors  means  that the second
      lies in the commutator subgroup of the first.  Similarly, a segment
      of the form  $(f_1 \! \times \! f_2) {\sl C} f_3$  would mean  that
      the factors $f_1$ and $f_2$  commute modulo $f_3$ and $f_3$ lies in
      $[f_1,f_2]$.
\item{A} (for ``abelian''  between two factors  indicates that the second
      is  in the  $p$th  power  (but not the commutator subgroup)  of the
      first.   ``A''   may  also   follow  the  factors,   if  bracketed.
\item{E} (for ``elementary abelian''  between two factors  indicates that
      together   they  generate  an  elementary  abelian  group   (modulo
      subsequent factors), but that the resulting $F_pQ$-module extension
      does not split.
\item{N}  (for ``nonsplit''  before  a  factor  indicates  that  $Q$  (or
      possibly its covering group)  splits down as far at this factor but
      not over the factor itself.  So  ``$Q f_1 {\sl N} f_2$'' means that
      the normal subgroup  $f_1f_2$  of the group  has no complement but,
      modulo $f_2$, $f_1$, does have a complement.

Brackets have their obvious meaning. Summarizing, we have:
\item{$\times$} = dirext product;
\item{C} = commutator subgroup;
\item{A} = abelian;
\item{E} = elementary abelian; and
\item{N} = nonsplit.

Here are some examples.
\item{(i)}  $A_5 (2^4 {\sl E} 2^1 {\sl E} 2^4) {\sl A}$  means  that  the
      pairs  $2^4 {\sl E} 2^1$  and $2^1 {\sl E} 2^4$ are both elementary
      abelian of exponent 4.
\item{(ii)}   $A_5 (2^4 {\sl E} 2^1 {\sl A}) {\sl C} 2^1$    means   that
      $O_2(G)$  is of  symplectic type  $2^{1+5}$,  with  Frattini factor
      group  of type   $2^4 {\sl E} 2^1$.   The   ``A''  after the  $2^1$
      indicates that $G$ has a  central cyclic subgroup $2^1 {\sl A} 2^1$
      of order 4.
\item{(iii)}     $L_3(2) ((2^1 {\sl E}) \! \times \! ({\sl N} 2^3 {\sl E}
      2^{3^\prime} {\sl A}) {\sl C}) 2^{3^\prime}$    means   that    the
      $2^{3^\prime}$ factor at the bottom lies in the commutator subgroup
      of the pair $2^3 {\sl E} 2^{3^\prime}$ in the middle, but the lower
      pair $2^{3^\prime} {\sl A} 2^{3^\prime}$  is abelian of exponent 4.
      There  is  also  a submodule  $2^1 {\sl E} 2^{3^\prime}$,  and  the
      covering group  $L_3(2) 2^1$  of  $L_3(2)$  does not split over the
      $2^3$  factor.  (Since $G$ is perfect,  it goes without saying that
      the extension $L_3(2) 2^1$ cannot split itself.)

We  must  stress  that this  notation does   not  always succeed in being
precise  or even unambiguous, and the  reader is free to  ignore it if it
does not seem helpful.\par}

If such a group description has  been given in  the book for $G$ (and, in
fact, this is the case for  most of the library  groups), it is displayed
by the `DisplayInformationPerfectGroups' function. Otherwise the function
provides a less explicit  description  of  the  (in these cases   unique)
Holt-Plesken class to which $G$ belongs, together with a serial number if
this is necessary to make it unique.
