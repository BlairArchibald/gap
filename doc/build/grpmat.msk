%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%A  grpmat.msk                  GAP documentation            Alexander Hulpke
%%
%A  @(#)$Id$
%%
%Y  (C) 1998 School Math and Comp. Sci., University of St.  Andrews, Scotland
%Y  Copyright (C) 2002 The GAP Group
%%
\Chapter{Matrix Groups}

Matrix groups are groups generated by invertible square matrices.

In the following example we temporarily increase the line length limit from
its default value 80 to 83 in order to get a nicer output format.

\beginexample
gap> m1 := [ [ Z(3)^0, Z(3)^0,   Z(3) ],
>            [   Z(3), 0*Z(3),   Z(3) ],
>            [ 0*Z(3),   Z(3), 0*Z(3) ] ];;
gap> m2 := [ [   Z(3),   Z(3), Z(3)^0 ],
>            [   Z(3), 0*Z(3),   Z(3) ],
>            [ Z(3)^0, 0*Z(3),   Z(3) ] ];;
gap> SizeScreen([ 83, ]);;
gap> m := Group( m1, m2 );
Group(
[ [ [ Z(3)^0, Z(3)^0, Z(3) ], [ Z(3), 0*Z(3), Z(3) ], [ 0*Z(3), Z(3), 0*Z(3) ] ],
  [ [ Z(3), Z(3), Z(3)^0 ], [ Z(3), 0*Z(3), Z(3) ], [ Z(3)^0, 0*Z(3), Z(3) ] ] ])
gap> SizeScreen([ 80, ]);;
\endexample

\Declaration{IsMatrixGroup}

For most operations, {\GAP} only provides methods for finite matrix groups.
Many calculations in finite matrix groups are done via a `NiceMonomorphism'
(see "Nice Monomorphisms") that represents a faithful action on vectors.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Attributes and Properties for Matrix Groups}

\Declaration{DimensionOfMatrixGroup}
\Declaration{DefaultFieldOfMatrixGroup}
\Declaration{FieldOfMatrixGroup}
\beginexample
gap> DimensionOfMatrixGroup(m);
3
gap> DefaultFieldOfMatrixGroup(m);
GF(3)
\endexample

\Declaration{TransposedMatrixGroup}
\beginexample
gap> G := Group( [[0,-1],[1,0]] );
Group([ [ [ 0, -1 ], [ 1, 0 ] ] ])
gap> T := TransposedMatrixGroup( G );
Group([ [ [ 0, 1 ], [ -1, 0 ] ] ])
gap> IsIdenticalObj( G, TransposedMatrixGroup( T ) );
true
\endexample


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   
\Section{Actions of Matrix Groups}                                           
                                                                                
\FileHeader[1]{grpmat}

\Declaration{ProjectiveActionOnFullSpace}
\Declaration{ProjectiveActionHomomorphismMatrixGroup}

\Declaration{BlowUpIsomorphism}
\beginexample
gap> g:= GL(2,4);;
gap> B:= CanonicalBasis( GF(4) );;  BasisVectors( B );
[ Z(2)^0, Z(2^2) ]
gap> iso:= BlowUpIsomorphism( g, B );;
gap> Display( Image( iso, [ [ Z(4), Z(2) ], [ 0*Z(2), Z(4)^2 ] ] ) );
 . 1 1 .
 1 1 . 1
 . . 1 1
 . . 1 .
gap> img:= Image( iso, g );
<matrix group with 2 generators>
gap> Index( GL(4,2), img );
112
\endexample


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{GL and SL}

\Declaration{IsGeneralLinearGroup}
\Declaration{IsNaturalGL}
\Declaration{IsSpecialLinearGroup}
\Declaration{IsNaturalSL}
\beginexample
gap> IsNaturalGL(m);
false
\endexample

\Declaration{IsSubgroupSL}

(See also section~"Classical Groups".)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Invariant Forms}

\Declaration{InvariantBilinearForm}
\Declaration{IsFullSubgroupGLorSLRespectingBilinearForm}
\Declaration{InvariantSesquilinearForm}
\Declaration{IsFullSubgroupGLorSLRespectingSesquilinearForm}
\Declaration{InvariantQuadraticForm}
\Declaration{IsFullSubgroupGLorSLRespectingQuadraticForm}

\beginexample
gap> g:= Sp( 2, 3 );;
gap> m:= InvariantBilinearForm( g ).matrix;
[ [ 0*Z(3), Z(3)^0 ], [ Z(3), 0*Z(3) ] ]
gap> [ 0, 1 ] * m * [ 1, -1 ];           # evaluate the bilinear form
Z(3)
gap> IsFullSubgroupGLorSLRespectingBilinearForm( g );
true
gap> g:= SU( 2, 4 );;
gap> m:= InvariantSesquilinearForm( g ).matrix;
[ [ 0*Z(2), Z(2)^0 ], [ Z(2)^0, 0*Z(2) ] ]
gap> [ 0, 1 ] * m * [ 1, 1 ];            # evaluate the bilinear form
Z(2)^0
gap> IsFullSubgroupGLorSLRespectingSesquilinearForm( g );
true
gap> g:= GO( 1, 2, 3 );;
gap> m:= InvariantBilinearForm( g ).matrix;
[ [ 0*Z(3), Z(3)^0 ], [ Z(3)^0, 0*Z(3) ] ]
gap> [ 0, 1 ] * m * [ 1, 1 ];            # evaluate the bilinear form
Z(3)^0
gap> q:= InvariantQuadraticForm( g ).matrix;
[ [ 0*Z(3), Z(3)^0 ], [ 0*Z(3), 0*Z(3) ] ]
gap> [ 0, 1 ] * q * [ 0, 1 ];            # evaluate the quadratic form
0*Z(3)
gap> IsFullSubgroupGLorSLRespectingQuadraticForm( g );
true
\endexample


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Matrix Groups in Characteristic 0}

Most of the functions described in this and the following section have
implementations which use functions from the {\GAP} package Carat.
If Carat is not installed or not compiled, no suitable methods are available.

\Declaration{IsCyclotomicMatrixGroup}
\Declaration{IsRationalMatrixGroup}
\Declaration{IsIntegerMatrixGroup}

\Declaration{IsNaturalGLnZ}
\beginexample
gap> IsNaturalGLnZ( GL( 2, Integers ) );
true
\endexample

\Declaration{IsNaturalSLnZ}
\beginexample
gap> IsNaturalSLnZ( SL( 2, Integers ) );
true
\endexample

\Declaration{InvariantLattice}
\Declaration{NormalizerInGLnZ}
\Declaration{CentralizerInGLnZ}
\Declaration{ZClassRepsQClass}
\Declaration{IsBravaisGroup}
\Declaration{BravaisGroup}
\Declaration{BravaisSubgroups}
\Declaration{BravaisSupergroups}
\Declaration{NormalizerInGLnZBravaisGroup}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Acting OnRight and OnLeft}

\FileHeader{grpramat}[1]

\Declaration{CrystGroupDefaultAction}
\Declaration{SetCrystGroupDefaultAction}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   
%%
%E

