%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%A  wordass.msk                 GAP documentation            Alexander Hulpke
%%
%A  @(#)$Id$
%%
%Y  (C) 1998 School Math and Comp. Sci., University of St.  Andrews, Scotland
%%
\PreliminaryChapter{Associative Words} 

Associative words are used to represent free groups, semigroups and monoids
in {\GAP}. These words are just sequences of letters (and probably their
inverses) in an alphabet. These words can be concatenated and may (in
free monoids, respectively free groups) permit computation of an
identity and of inverses.

\Declaration{IsAssocWord}
\Declaration{IsAssocWordWithOne}
\Declaration{IsAssocWordWithInverse}

It is possible to have various alphabets and each alphabet yields a separate
family of associative words. There is no relation whatsoever between words
in different families.

\beginexample
gap> f:=FreeGroup("a","b","c");
<free group on the generators [a,b,c]>
gap> gens:=GeneratorsOfGroup(f);;                                    
gap> w:=gens[1]*gens[2]/gens[3]*gens[2]*gens[1]/gens[1]*gens[3]/gens[2];
a*b*c^-1*b*c*b^-1
gap> w^-1;
b*c^-1*b^-1*c*b^-1*a^-1
\endexample

Words are displayed as products of letters. The letters are usually printed
like `f1', `f2', $\ldots$, but it is also possible to give user defined
names (which can be arbitrary strings) to them. These names do not
necessarily identify a unique generator, it is possible to have several
letters (even in the same family) that are displayed in the same way.
*There is no relation between the names of letters and
variable names.*

Using homomorphisms it is possible to express elements of a group as words
in generators, see "Expressing group elements as words in generators".

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Free Groups, Monoids and Semigroups}

Usually a family of associative words will be generated by a constructing
the free object generated by them.

\Declaration{FreeGroup}
\Declaration{IsFreeGroup}
\Declaration{FreeMonoid}
\Declaration{FreeSemigroup}

Each free object defines a unique alphabet (and thus a unique family of
words) and its generators are simply the
words of length one in this alphabet.

\beginexample
gap> FreeGroup(5);      
<free group on the generators [ f1, f2, f3, f4, f5 ] >
gap> FreeGroup("a","b");
<free group on the generators [a,b]>
gap> FreeGroup(infinity);
<free group with infinity generators>
gap> FreeSemigroup("x","y");
<semigroup with 2 generators>
gap> FreeMonoid(7);
<monoid with 7 generators>
\endexample

Remember that names are just a help for printing and do not necessarily
distinguish letters and it is possible to create arbitrarily weird
situations with strange letter names.
\beginexample
gap> f:=FreeGroup("x","x");gens:=GeneratorsOfGroup(f);;
<free group on the generators [x,x]>
gap> gens[1]=gens[2];
false
gap> f:=FreeGroup("f1*f2","f2^-1","Group( [ f1, f2 ] )");
<free group on the generators [ f1*f2, f2^-1, Group( [ f1, f2 ] ) ]>
gap> gens:=GeneratorsOfGroup(f);;
gap> gens[1]*gens[2];
f1*f2*f2^-1
gap> gens[1]/gens[3];
f1*f2*Group( [ f1, f2 ] )^-1
gap> gens[3]/gens[1]/gens[2];
Group( [ f1, f2 ] )*f1*f2^-1*f2^-1^-1
\endexample

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Comparison of Words}

\>`<w1> = <w2>'{equality!words}

Two words are equal if they are words over the same alphabet and if they are
a sequence of the same letters. There is no ``universal'' empty word, every
alphabet (that is every family of words) has its own empty word.

\beginexample
gap> f:=FreeGroup("a","b","b");;
gap> gens:=GeneratorsOfGroup(f); 
[ a, b, b ]
gap> gens[2]=gens[3];
false
gap> x:=gens[1]*gens[2];
a*b
gap> y:=gens[2]/gens[2]*gens[1]*gens[2];
a*b
gap> x=y;
true
gap> z:=gens[2]/gens[2]*gens[1]*gens[3];
a*b
gap> x=z;
false
\endexample

\>`<w1> \< <w2>'{smaller!words}

Words are  ordered as follows:  A word <w1> is considered smaller than
another word <w2> it it is shorted, or, if they have the same  length, if
it is first in  the lexicographical ordering  implied by  the ordering of
the letters.  Letters are sorted in the order in which they were created.
Each letter <g> is larger than its inverse <g> and its inverse is larger than
every letter that is smaller than <g>.

\beginexample
gap> f:=FreeGroup("a","b");;    
gap> a:=GeneratorsOfGroup(f)[1];;b:=GeneratorsOfGroup(f)[2];;
gap> a<b;
true
gap> a<a^-1;
false
gap> a<b^-1;
true
gap> b^-1<b;
true
gap> a*b<a*b^-1;
false
\endexample

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Operations for Words}

Multiplication of associative words is performed by concatenating the words
and reducing adjacent pairs of generators and their inverses.
The usual arithmetical operators `\*', `One' and (if the generators are
invertible) `Inverse', `/',`^', and `Comm' are applicable to associative words. 

\>Length(<w>) O

returns the number of letter in the word <w>

\beginexample
gap> f:=FreeGroup("a","b");;    
gap> a:=GeneratorsOfGroup(f)[1];;b:=GeneratorsOfGroup(f)[2];;
gap> w:=a^5*b*a^2/b^4*a;
a^5*b*a^2*b^-4*a
gap> Length(w);
13
\endexample

\Declaration{MappedWord}
\beginexample
gap> MappedWord(w,[a,b],[(1,2),(1,2,3,4)]);
(1,3,4,2)
gap> (1,2)^5*(1,2,3,4)*(1,2)^2/(1,2,3,4)^4*(1,2);   
(1,3,4,2)
\endexample

\Declaration{Subword}
\beginexample
gap> Subword(w,3,7);
a^3*b*a
\endexample

\Declaration{PositionWord}
\beginexample
gap> PositionWord(w,a/b,1);
8
gap> Subword(w,8,9);
a*b^-1
gap> PositionWord(w,a^2,1);
1
gap> PositionWord(w,a^2,2);
2
gap> PositionWord(w,a^2,6);
7
gap> PositionWord(w,a^2,8);
fail
\endexample

\Declaration{SubstitutedWord}
\beginexample
gap> SubstitutedWord(w,3,7,a^19);
a^22*b^-4*a
\endexample

\Declaration{EliminatedWord}
\beginexample
gap> EliminatedWord(w,a,a^2);
a^10*b*a^4*b^-4*a^2
gap> EliminatedWord(w,a,b^-1);
b^-11
\endexample

\Declaration{ExponentSumWord}
\beginexample
gap> ExponentSumWord(w,a);
8
gap> ExponentSumWord(w,b);
-3
\endexample

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Operations for Words by their Syllables}

When writing a word as a product of powers of generators, we call these
powers of generators the *syllables* of the word.

\Declaration{NumberSyllables}
\Declaration{ExponentSyllable}
\Declaration{GeneratorSyllable}
\Declaration{SubSyllables}
\beginexample
gap> NumberSyllables(w);             
5
gap> ExponentSyllable(w,3);
2
gap> GeneratorSyllable(w,3);
1
gap> SubSyllables(w,2,3);
b*a^2
\endexample

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{External Representation for Associative Words}

\FileHeader{wordass}[1]
\beginexample
gap> w:=ObjByExtRep(FamilyObj(a),[1,5,2,-7,1,3,2,4,1,-2]);
a^5*b^-7*a^3*b^4*a^-2
gap> ExtRepOfObj(w^2);
[ 1, 5, 2, -7, 1, 3, 2, 4, 1, 3, 2, -7, 1, 3, 2, 4, 1, -2 ]
\endexample
