                         README.more
         ( some additional tips and tricks by
           Frank Lübeck,  Frank.Luebeck@Math.RWTH-Aachen.De )


===================================================
Almost automatic installation on Linux/UNIX systems
===================================================

On my system the script "inst_all", appended at the bottom of this file
installs GAP completely including the packages which need compilation.
Even if it doesn't just run through on your system, you will at least get 
an idea. The most critical part is usually the compilation of 'xgap' in the
end, since on some systems there are missing header or library files for the
X11 environment.

To use the script, copy the archive files to a directory under which you
want to install GAP (e.g., /usr/local/lib, such that GAP's root directory
becomes /usr/local/lib/gap4r3). Also copy the script to that directory, give
it executable permission ('chmod 755 inst_all') and start it. (Alternatively
try the separate lines with click and paste.)


=======================
Using a Saved Workspace
=======================

GAP starts up much faster, when you use a saved workspace. Here is how I do
this:

After installation start GAP as follows inside GAP's root directory:

mymachine> gap -r -N

Then load all packages you are interested in, enter a few commands which 
cause the loading of certain files and save the workspace, for example enter
the following commands:


######################################################
RequirePackage("EDIM");
RequirePackage("ace");
RequirePackage("anupq");
RequirePackage("aclib");
RequirePackage("atlasrep");
RequirePackage("cohomolo");
RequirePackage("format");
RequirePackage("fplsa");
RequirePackage("grape");
RequirePackage("grpconst");
RequirePackage("guava");
RequirePackage("itc");
RequirePackage("kbmag");
RequirePackage("openmath");
RequirePackage("unipot");

# load help book infos
??blablfdfhskhks

# for nicer TAB completion
function() local a; for a in NamesGVars() do if ISB_GVAR(a) then
VAL_GVAR(a); fi;od;end;
last();

# save the workspace
SaveWorkspace("bin/wsgap4");
quit;
######################################################

Now generate a start script for GAP which uses this workspace, on UNIX
a command similar to the following will do this (provided your standard
start script for GAP is called 'gap'):

echo "bin/gap.sh -L "`pwd`"/bin/wsgap4 "'$*' > bin/gapL
chmod 755 bin/gapL


==============
Static Linking 
==============

On typical Linux systems the maximal memory which can be used by a GAP process
is about 870 MB. In times where PCs with 2 GB of main memory are affordable,
this is a noticable limit. 

I'm using a statically linked GAP which allows to use up to 2 GB for a
single GAP process (on 32 bit systems).

On my Linux system I use the following commands to compile a statically
linked GAP 

mymachine> setenv COPTS '-Wall -O2 -g -fomit-frame-pointer -pipe -mpreferred-stack-boundary=2 -march=i686 -fno-strict-aliasing'
mymachine> setenv LOPTS "-static"
mymachine> ./configure
mymachine> make

(This is csh  syntax, use "export COPTS='...'" with sh/bash/zsh ...)
You can also set CC if you want to specify another compiler. Adjust the
COPTS settings to your preferred optimization options.


=======================================
Using Coloring of Prompts and GAP Input
=======================================

I like the  possibility of GAP 4.3, to show the prompt and input text in a
different color. This is achieved by the following function (could be put
in a user's ~/.gaprc file or create a file in 'lib' which everybody can read
with 'ReadLib'):

-----------------------------------------------
STDOUT := OutputTextUser();;
PrintPromptHook:=CPROMPT;;
EndLineHook:=function() end;;
ColorPrompt := function(b)
  if b=false then
    Unbind(PrintPromptHook);
    Unbind(EndLineHook);
    return;
  fi;
  # my colored interface
  # we stored this above to avoid overwriting last system error with 
  # function call
  ###  STDOUT := OutputTextUser();
  # print the prompt
  PrintPromptHook := function()
    local cp;
    cp := CPROMPT();
    if cp = "gap> " then
      cp := "gap> ";
    fi;
    # different color for brk...> prompts
    if Length(cp)>0 and cp[1] = 'b' then
      WriteAll(STDOUT, "\033[1m\033[31m");
    else
      WriteAll(STDOUT, "\033[1m\033[34m");
    fi;
    # use this instead of Print such that the column counter for the 
    # command line editor is correct
    PRINT_CPROMPT(cp);
    # another color for input
    WriteAll(STDOUT, "\033[0m\033[31m");
  end;
  # reset attributes before going to the next line
  EndLineHook := function()
    WriteAll(STDOUT, "\033[0m");
  end;
end;
Unbind(PrintPromptHook);
Unbind(EndLineHook);
-----------------------------------------------

After reading this one can switch on/off colored prompts with:
    'ColorPrompt(true);'     resp.     'ColorPrompt(false);'  

(You must have a terminal which interprets ANSI color sequences, most terminal
emulations do.)

Apropos colors: I have a line 

ANSI_COLORS := true;

in my ~/.gaprc file. This causes that some help pages are also shown with
color markup. (See '?GAPDoc: ANSI_COLORS' in the online help.)





---------------------   the script inst_all  ------------------------------
#!/usr/bin/tcsh

setenv NAME "4r3"
setenv COPTS "-Wall -O2 -g -fomit-frame-pointer -pipe -mpreferred-stack-boundary=2 -march=i686 -fno-strict-aliasing"

tar xzvf gap$NAME.tar.gz
cd gap$NAME/pkg
tar xzvf ../../accpkg$NAME.tar.gz
tar xzvf ../../deppkg$NAME.tar.gz

cd ..

# compile GAP
./configure
make
unsetenv COPTS
unsetenv LOPTS
# we collect all start script in 'bin'
cp bin/`sed -e 's/GAParch=//' sysinfo.gap`/gac bin

# now the packages
cd pkg

cd ace
./configure ../..
make
cd ..

cd anupq
./configure ../..
# on Linux with gmp in standard place and with GAP 4.3 gap.sh script
# in standard path as: gap  just do: make  (otherwise check installation
# instructions - configure output gives hints)
make
# ensure it installed ok
testPq
cd ..

cd carat
tar xzf carat*.tar.gz
ln -s carat/bin bin
cd carat
mv Makefile Makefile.orig
echo 'TOPDIR = '`pwd` > Makefile
grep -v "^TOPDIR" Makefile.orig >> Makefile
make
cd ../..

cd cohomolo
./configure ../..
make
cd ..

# create dynamic library and statically linked GAP with EDIM kernel module
cd edim
./configure
make
cd ../../bin/`sed -e 's/GAParch=//' ../../sysinfo.gap`
./gac -o gap-static -P "-static" ../../pkg/edim/src/ediv.c
cd ../../pkg

cd example
./configure ../..
make
cd ..

cd fplsa
./configure ../..
make
#cd doc
#tex manual
#tex manual
#pdftex manual
#pdftex manual
#cd ../..
cd ..

cd grape
./configure ../..
make linux-gcc
cd ..

cd guava
./configure ../..
make
cd ..

cd kbmag
./configure ../..
make
make texdoc
cd doc
pdftex manual
pdftex manual
cd ../..

cd openmath
./configure ../..
make
cd ..

#  see the pargap documentation how to use this 
#  (in particular, user needs procgroup file)
cd pargap
./configure ../..
make
cp bin/pargap.sh ../../bin/
cd ..

cd xgap
./configure
make
cp bin/xgap.sh ../../bin/
cd ..

cd ..

